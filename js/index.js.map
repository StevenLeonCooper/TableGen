{"mappings":"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","sources":["./scripts/libs/mustache.js","./scripts/helper_events.js","./scripts/helper_ui.js","./scripts/helper_bindings.js","./scripts/app.js"],"sourcesContent":["/*!\r\n * mustache.js - Logic-less {{mustache}} templates with JavaScript\r\n * http://github.com/janl/mustache.js\r\n */\r\n\r\nvar objectToString = Object.prototype.toString;\r\nvar isArray = Array.isArray || function isArrayPolyfill (object) {\r\n  return objectToString.call(object) === '[object Array]';\r\n};\r\n\r\nfunction isFunction (object) {\r\n  return typeof object === 'function';\r\n}\r\n\r\n/**\r\n * More correct typeof string handling array\r\n * which normally returns typeof 'object'\r\n */\r\nfunction typeStr (obj) {\r\n  return isArray(obj) ? 'array' : typeof obj;\r\n}\r\n\r\nfunction escapeRegExp (string) {\r\n  return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\r\n}\r\n\r\n/**\r\n * Null safe way of checking whether or not an object,\r\n * including its prototype, has a given property\r\n */\r\nfunction hasProperty (obj, propName) {\r\n  return obj != null && typeof obj === 'object' && (propName in obj);\r\n}\r\n\r\n/**\r\n * Safe way of detecting whether or not the given thing is a primitive and\r\n * whether it has the given property\r\n */\r\nfunction primitiveHasOwnProperty (primitive, propName) {\r\n  return (\r\n    primitive != null\r\n    && typeof primitive !== 'object'\r\n    && primitive.hasOwnProperty\r\n    && primitive.hasOwnProperty(propName)\r\n  );\r\n}\r\n\r\n// Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\r\n// See https://github.com/janl/mustache.js/issues/189\r\nvar regExpTest = RegExp.prototype.test;\r\nfunction testRegExp (re, string) {\r\n  return regExpTest.call(re, string);\r\n}\r\n\r\nvar nonSpaceRe = /\\S/;\r\nfunction isWhitespace (string) {\r\n  return !testRegExp(nonSpaceRe, string);\r\n}\r\n\r\nvar entityMap = {\r\n  '&': '&amp;',\r\n  '<': '&lt;',\r\n  '>': '&gt;',\r\n  '\"': '&quot;',\r\n  \"'\": '&#39;',\r\n  '/': '&#x2F;',\r\n  '`': '&#x60;',\r\n  '=': '&#x3D;'\r\n};\r\n\r\nfunction escapeHtml (string) {\r\n  return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap (s) {\r\n    return entityMap[s];\r\n  });\r\n}\r\n\r\nvar whiteRe = /\\s*/;\r\nvar spaceRe = /\\s+/;\r\nvar equalsRe = /\\s*=/;\r\nvar curlyRe = /\\s*\\}/;\r\nvar tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\r\n\r\n/**\r\n * Breaks up the given `template` string into a tree of tokens. If the `tags`\r\n * argument is given here it must be an array with two string values: the\r\n * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\r\n * course, the default is to use mustaches (i.e. mustache.tags).\r\n *\r\n * A token is an array with at least 4 elements. The first element is the\r\n * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\r\n * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\r\n * all text that appears outside a symbol this element is \"text\".\r\n *\r\n * The second element of a token is its \"value\". For mustache tags this is\r\n * whatever else was inside the tag besides the opening symbol. For text tokens\r\n * this is the text itself.\r\n *\r\n * The third and fourth elements of the token are the start and end indices,\r\n * respectively, of the token in the original template.\r\n *\r\n * Tokens that are the root node of a subtree contain two more elements: 1) an\r\n * array of tokens in the subtree and 2) the index in the original template at\r\n * which the closing tag for that section begins.\r\n *\r\n * Tokens for partials also contain two more elements: 1) a string value of\r\n * indendation prior to that tag and 2) the index of that tag on that line -\r\n * eg a value of 2 indicates the partial is the third tag on this line.\r\n */\r\nfunction parseTemplate (template, tags) {\r\n  if (!template)\r\n    return [];\r\n  var lineHasNonSpace = false;\r\n  var sections = [];     // Stack to hold section tokens\r\n  var tokens = [];       // Buffer to hold the tokens\r\n  var spaces = [];       // Indices of whitespace tokens on the current line\r\n  var hasTag = false;    // Is there a {{tag}} on the current line?\r\n  var nonSpace = false;  // Is there a non-space char on the current line?\r\n  var indentation = '';  // Tracks indentation for tags that use it\r\n  var tagIndex = 0;      // Stores a count of number of tags encountered on a line\r\n\r\n  // Strips all whitespace tokens array for the current line\r\n  // if there was a {{#tag}} on it and otherwise only space.\r\n  function stripSpace () {\r\n    if (hasTag && !nonSpace) {\r\n      while (spaces.length)\r\n        delete tokens[spaces.pop()];\r\n    } else {\r\n      spaces = [];\r\n    }\r\n\r\n    hasTag = false;\r\n    nonSpace = false;\r\n  }\r\n\r\n  var openingTagRe, closingTagRe, closingCurlyRe;\r\n  function compileTags (tagsToCompile) {\r\n    if (typeof tagsToCompile === 'string')\r\n      tagsToCompile = tagsToCompile.split(spaceRe, 2);\r\n\r\n    if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)\r\n      throw new Error('Invalid tags: ' + tagsToCompile);\r\n\r\n    openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\r\n    closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\r\n    closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\r\n  }\r\n\r\n  compileTags(tags || mustache.tags);\r\n\r\n  var scanner = new Scanner(template);\r\n\r\n  var start, type, value, chr, token, openSection;\r\n  while (!scanner.eos()) {\r\n    start = scanner.pos;\r\n\r\n    // Match any text between tags.\r\n    value = scanner.scanUntil(openingTagRe);\r\n\r\n    if (value) {\r\n      for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\r\n        chr = value.charAt(i);\r\n\r\n        if (isWhitespace(chr)) {\r\n          spaces.push(tokens.length);\r\n          indentation += chr;\r\n        } else {\r\n          nonSpace = true;\r\n          lineHasNonSpace = true;\r\n          indentation += ' ';\r\n        }\r\n\r\n        tokens.push([ 'text', chr, start, start + 1 ]);\r\n        start += 1;\r\n\r\n        // Check for whitespace on the current line.\r\n        if (chr === '\\n') {\r\n          stripSpace();\r\n          indentation = '';\r\n          tagIndex = 0;\r\n          lineHasNonSpace = false;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Match the opening tag.\r\n    if (!scanner.scan(openingTagRe))\r\n      break;\r\n\r\n    hasTag = true;\r\n\r\n    // Get the tag type.\r\n    type = scanner.scan(tagRe) || 'name';\r\n    scanner.scan(whiteRe);\r\n\r\n    // Get the tag value.\r\n    if (type === '=') {\r\n      value = scanner.scanUntil(equalsRe);\r\n      scanner.scan(equalsRe);\r\n      scanner.scanUntil(closingTagRe);\r\n    } else if (type === '{') {\r\n      value = scanner.scanUntil(closingCurlyRe);\r\n      scanner.scan(curlyRe);\r\n      scanner.scanUntil(closingTagRe);\r\n      type = '&';\r\n    } else {\r\n      value = scanner.scanUntil(closingTagRe);\r\n    }\r\n\r\n    // Match the closing tag.\r\n    if (!scanner.scan(closingTagRe))\r\n      throw new Error('Unclosed tag at ' + scanner.pos);\r\n\r\n    if (type == '>') {\r\n      token = [ type, value, start, scanner.pos, indentation, tagIndex, lineHasNonSpace ];\r\n    } else {\r\n      token = [ type, value, start, scanner.pos ];\r\n    }\r\n    tagIndex++;\r\n    tokens.push(token);\r\n\r\n    if (type === '#' || type === '^') {\r\n      sections.push(token);\r\n    } else if (type === '/') {\r\n      // Check section nesting.\r\n      openSection = sections.pop();\r\n\r\n      if (!openSection)\r\n        throw new Error('Unopened section \"' + value + '\" at ' + start);\r\n\r\n      if (openSection[1] !== value)\r\n        throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\r\n    } else if (type === 'name' || type === '{' || type === '&') {\r\n      nonSpace = true;\r\n    } else if (type === '=') {\r\n      // Set the tags for the next time around.\r\n      compileTags(value);\r\n    }\r\n  }\r\n\r\n  stripSpace();\r\n\r\n  // Make sure there are no open sections when we're done.\r\n  openSection = sections.pop();\r\n\r\n  if (openSection)\r\n    throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\r\n\r\n  return nestTokens(squashTokens(tokens));\r\n}\r\n\r\n/**\r\n * Combines the values of consecutive text tokens in the given `tokens` array\r\n * to a single token.\r\n */\r\nfunction squashTokens (tokens) {\r\n  var squashedTokens = [];\r\n\r\n  var token, lastToken;\r\n  for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\r\n    token = tokens[i];\r\n\r\n    if (token) {\r\n      if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\r\n        lastToken[1] += token[1];\r\n        lastToken[3] = token[3];\r\n      } else {\r\n        squashedTokens.push(token);\r\n        lastToken = token;\r\n      }\r\n    }\r\n  }\r\n\r\n  return squashedTokens;\r\n}\r\n\r\n/**\r\n * Forms the given array of `tokens` into a nested tree structure where\r\n * tokens that represent a section have two additional items: 1) an array of\r\n * all tokens that appear in that section and 2) the index in the original\r\n * template that represents the end of that section.\r\n */\r\nfunction nestTokens (tokens) {\r\n  var nestedTokens = [];\r\n  var collector = nestedTokens;\r\n  var sections = [];\r\n\r\n  var token, section;\r\n  for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\r\n    token = tokens[i];\r\n\r\n    switch (token[0]) {\r\n      case '#':\r\n      case '^':\r\n        collector.push(token);\r\n        sections.push(token);\r\n        collector = token[4] = [];\r\n        break;\r\n      case '/':\r\n        section = sections.pop();\r\n        section[5] = token[2];\r\n        collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\r\n        break;\r\n      default:\r\n        collector.push(token);\r\n    }\r\n  }\r\n\r\n  return nestedTokens;\r\n}\r\n\r\n/**\r\n * A simple string scanner that is used by the template parser to find\r\n * tokens in template strings.\r\n */\r\nfunction Scanner (string) {\r\n  this.string = string;\r\n  this.tail = string;\r\n  this.pos = 0;\r\n}\r\n\r\n/**\r\n * Returns `true` if the tail is empty (end of string).\r\n */\r\nScanner.prototype.eos = function eos () {\r\n  return this.tail === '';\r\n};\r\n\r\n/**\r\n * Tries to match the given regular expression at the current position.\r\n * Returns the matched text if it can match, the empty string otherwise.\r\n */\r\nScanner.prototype.scan = function scan (re) {\r\n  var match = this.tail.match(re);\r\n\r\n  if (!match || match.index !== 0)\r\n    return '';\r\n\r\n  var string = match[0];\r\n\r\n  this.tail = this.tail.substring(string.length);\r\n  this.pos += string.length;\r\n\r\n  return string;\r\n};\r\n\r\n/**\r\n * Skips all text until the given regular expression can be matched. Returns\r\n * the skipped string, which is the entire tail if no match can be made.\r\n */\r\nScanner.prototype.scanUntil = function scanUntil (re) {\r\n  var index = this.tail.search(re), match;\r\n\r\n  switch (index) {\r\n    case -1:\r\n      match = this.tail;\r\n      this.tail = '';\r\n      break;\r\n    case 0:\r\n      match = '';\r\n      break;\r\n    default:\r\n      match = this.tail.substring(0, index);\r\n      this.tail = this.tail.substring(index);\r\n  }\r\n\r\n  this.pos += match.length;\r\n\r\n  return match;\r\n};\r\n\r\n/**\r\n * Represents a rendering context by wrapping a view object and\r\n * maintaining a reference to the parent context.\r\n */\r\nfunction Context (view, parentContext) {\r\n  this.view = view;\r\n  this.cache = { '.': this.view };\r\n  this.parent = parentContext;\r\n}\r\n\r\n/**\r\n * Creates a new context using the given view with this context\r\n * as the parent.\r\n */\r\nContext.prototype.push = function push (view) {\r\n  return new Context(view, this);\r\n};\r\n\r\n/**\r\n * Returns the value of the given name in this context, traversing\r\n * up the context hierarchy if the value is absent in this context's view.\r\n */\r\nContext.prototype.lookup = function lookup (name) {\r\n  var cache = this.cache;\r\n\r\n  var value;\r\n  if (cache.hasOwnProperty(name)) {\r\n    value = cache[name];\r\n  } else {\r\n    var context = this, intermediateValue, names, index, lookupHit = false;\r\n\r\n    while (context) {\r\n      if (name.indexOf('.') > 0) {\r\n        intermediateValue = context.view;\r\n        names = name.split('.');\r\n        index = 0;\r\n\r\n        /**\r\n         * Using the dot notion path in `name`, we descend through the\r\n         * nested objects.\r\n         *\r\n         * To be certain that the lookup has been successful, we have to\r\n         * check if the last object in the path actually has the property\r\n         * we are looking for. We store the result in `lookupHit`.\r\n         *\r\n         * This is specially necessary for when the value has been set to\r\n         * `undefined` and we want to avoid looking up parent contexts.\r\n         *\r\n         * In the case where dot notation is used, we consider the lookup\r\n         * to be successful even if the last \"object\" in the path is\r\n         * not actually an object but a primitive (e.g., a string, or an\r\n         * integer), because it is sometimes useful to access a property\r\n         * of an autoboxed primitive, such as the length of a string.\r\n         **/\r\n        while (intermediateValue != null && index < names.length) {\r\n          if (index === names.length - 1)\r\n            lookupHit = (\r\n              hasProperty(intermediateValue, names[index])\r\n              || primitiveHasOwnProperty(intermediateValue, names[index])\r\n            );\r\n\r\n          intermediateValue = intermediateValue[names[index++]];\r\n        }\r\n      } else {\r\n        intermediateValue = context.view[name];\r\n\r\n        /**\r\n         * Only checking against `hasProperty`, which always returns `false` if\r\n         * `context.view` is not an object. Deliberately omitting the check\r\n         * against `primitiveHasOwnProperty` if dot notation is not used.\r\n         *\r\n         * Consider this example:\r\n         * ```\r\n         * Mustache.render(\"The length of a football field is {{#length}}{{length}}{{/length}}.\", {length: \"100 yards\"})\r\n         * ```\r\n         *\r\n         * If we were to check also against `primitiveHasOwnProperty`, as we do\r\n         * in the dot notation case, then render call would return:\r\n         *\r\n         * \"The length of a football field is 9.\"\r\n         *\r\n         * rather than the expected:\r\n         *\r\n         * \"The length of a football field is 100 yards.\"\r\n         **/\r\n        lookupHit = hasProperty(context.view, name);\r\n      }\r\n\r\n      if (lookupHit) {\r\n        value = intermediateValue;\r\n        break;\r\n      }\r\n\r\n      context = context.parent;\r\n    }\r\n\r\n    cache[name] = value;\r\n  }\r\n\r\n  if (isFunction(value))\r\n    value = value.call(this.view);\r\n\r\n  return value;\r\n};\r\n\r\n/**\r\n * A Writer knows how to take a stream of tokens and render them to a\r\n * string, given a context. It also maintains a cache of templates to\r\n * avoid the need to parse the same template twice.\r\n */\r\nfunction Writer () {\r\n  this.templateCache = {\r\n    _cache: {},\r\n    set: function set (key, value) {\r\n      this._cache[key] = value;\r\n    },\r\n    get: function get (key) {\r\n      return this._cache[key];\r\n    },\r\n    clear: function clear () {\r\n      this._cache = {};\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Clears all cached templates in this writer.\r\n */\r\nWriter.prototype.clearCache = function clearCache () {\r\n  if (typeof this.templateCache !== 'undefined') {\r\n    this.templateCache.clear();\r\n  }\r\n};\r\n\r\n/**\r\n * Parses and caches the given `template` according to the given `tags` or\r\n * `mustache.tags` if `tags` is omitted,  and returns the array of tokens\r\n * that is generated from the parse.\r\n */\r\nWriter.prototype.parse = function parse (template, tags) {\r\n  var cache = this.templateCache;\r\n  var cacheKey = template + ':' + (tags || mustache.tags).join(':');\r\n  var isCacheEnabled = typeof cache !== 'undefined';\r\n  var tokens = isCacheEnabled ? cache.get(cacheKey) : undefined;\r\n\r\n  if (tokens == undefined) {\r\n    tokens = parseTemplate(template, tags);\r\n    isCacheEnabled && cache.set(cacheKey, tokens);\r\n  }\r\n  return tokens;\r\n};\r\n\r\n/**\r\n * High-level method that is used to render the given `template` with\r\n * the given `view`.\r\n *\r\n * The optional `partials` argument may be an object that contains the\r\n * names and templates of partials that are used in the template. It may\r\n * also be a function that is used to load partial templates on the fly\r\n * that takes a single argument: the name of the partial.\r\n *\r\n * If the optional `config` argument is given here, then it should be an\r\n * object with a `tags` attribute or an `escape` attribute or both.\r\n * If an array is passed, then it will be interpreted the same way as\r\n * a `tags` attribute on a `config` object.\r\n *\r\n * The `tags` attribute of a `config` object must be an array with two\r\n * string values: the opening and closing tags used in the template (e.g.\r\n * [ \"<%\", \"%>\" ]). The default is to mustache.tags.\r\n *\r\n * The `escape` attribute of a `config` object must be a function which\r\n * accepts a string as input and outputs a safely escaped string.\r\n * If an `escape` function is not provided, then an HTML-safe string\r\n * escaping function is used as the default.\r\n */\r\nWriter.prototype.render = function render (template, view, partials, config) {\r\n  var tags = this.getConfigTags(config);\r\n  var tokens = this.parse(template, tags);\r\n  var context = (view instanceof Context) ? view : new Context(view, undefined);\r\n  return this.renderTokens(tokens, context, partials, template, config);\r\n};\r\n\r\n/**\r\n * Low-level method that renders the given array of `tokens` using\r\n * the given `context` and `partials`.\r\n *\r\n * Note: The `originalTemplate` is only ever used to extract the portion\r\n * of the original template that was contained in a higher-order section.\r\n * If the template doesn't use higher-order sections, this argument may\r\n * be omitted.\r\n */\r\nWriter.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate, config) {\r\n  var buffer = '';\r\n\r\n  var token, symbol, value;\r\n  for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\r\n    value = undefined;\r\n    token = tokens[i];\r\n    symbol = token[0];\r\n\r\n    if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate, config);\r\n    else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate, config);\r\n    else if (symbol === '>') value = this.renderPartial(token, context, partials, config);\r\n    else if (symbol === '&') value = this.unescapedValue(token, context);\r\n    else if (symbol === 'name') value = this.escapedValue(token, context, config);\r\n    else if (symbol === 'text') value = this.rawValue(token);\r\n\r\n    if (value !== undefined)\r\n      buffer += value;\r\n  }\r\n\r\n  return buffer;\r\n};\r\n\r\nWriter.prototype.renderSection = function renderSection (token, context, partials, originalTemplate, config) {\r\n  var self = this;\r\n  var buffer = '';\r\n  var value = context.lookup(token[1]);\r\n\r\n  // This function is used to render an arbitrary template\r\n  // in the current context by higher-order sections.\r\n  function subRender (template) {\r\n    return self.render(template, context, partials, config);\r\n  }\r\n\r\n  if (!value) return;\r\n\r\n  if (isArray(value)) {\r\n    for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\r\n      buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate, config);\r\n    }\r\n  } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {\r\n    buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate, config);\r\n  } else if (isFunction(value)) {\r\n    if (typeof originalTemplate !== 'string')\r\n      throw new Error('Cannot use higher-order sections without the original template');\r\n\r\n    // Extract the portion of the original template that the section contains.\r\n    value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\r\n\r\n    if (value != null)\r\n      buffer += value;\r\n  } else {\r\n    buffer += this.renderTokens(token[4], context, partials, originalTemplate, config);\r\n  }\r\n  return buffer;\r\n};\r\n\r\nWriter.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate, config) {\r\n  var value = context.lookup(token[1]);\r\n\r\n  // Use JavaScript's definition of falsy. Include empty arrays.\r\n  // See https://github.com/janl/mustache.js/issues/186\r\n  if (!value || (isArray(value) && value.length === 0))\r\n    return this.renderTokens(token[4], context, partials, originalTemplate, config);\r\n};\r\n\r\nWriter.prototype.indentPartial = function indentPartial (partial, indentation, lineHasNonSpace) {\r\n  var filteredIndentation = indentation.replace(/[^ \\t]/g, '');\r\n  var partialByNl = partial.split('\\n');\r\n  for (var i = 0; i < partialByNl.length; i++) {\r\n    if (partialByNl[i].length && (i > 0 || !lineHasNonSpace)) {\r\n      partialByNl[i] = filteredIndentation + partialByNl[i];\r\n    }\r\n  }\r\n  return partialByNl.join('\\n');\r\n};\r\n\r\nWriter.prototype.renderPartial = function renderPartial (token, context, partials, config) {\r\n  if (!partials) return;\r\n  var tags = this.getConfigTags(config);\r\n\r\n  var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\r\n  if (value != null) {\r\n    var lineHasNonSpace = token[6];\r\n    var tagIndex = token[5];\r\n    var indentation = token[4];\r\n    var indentedValue = value;\r\n    if (tagIndex == 0 && indentation) {\r\n      indentedValue = this.indentPartial(value, indentation, lineHasNonSpace);\r\n    }\r\n    var tokens = this.parse(indentedValue, tags);\r\n    return this.renderTokens(tokens, context, partials, indentedValue, config);\r\n  }\r\n};\r\n\r\nWriter.prototype.unescapedValue = function unescapedValue (token, context) {\r\n  var value = context.lookup(token[1]);\r\n  if (value != null)\r\n    return value;\r\n};\r\n\r\nWriter.prototype.escapedValue = function escapedValue (token, context, config) {\r\n  var escape = this.getConfigEscape(config) || mustache.escape;\r\n  var value = context.lookup(token[1]);\r\n  if (value != null)\r\n    return (typeof value === 'number' && escape === mustache.escape) ? String(value) : escape(value);\r\n};\r\n\r\nWriter.prototype.rawValue = function rawValue (token) {\r\n  return token[1];\r\n};\r\n\r\nWriter.prototype.getConfigTags = function getConfigTags (config) {\r\n  if (isArray(config)) {\r\n    return config;\r\n  }\r\n  else if (config && typeof config === 'object') {\r\n    return config.tags;\r\n  }\r\n  else {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nWriter.prototype.getConfigEscape = function getConfigEscape (config) {\r\n  if (config && typeof config === 'object' && !isArray(config)) {\r\n    return config.escape;\r\n  }\r\n  else {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nvar mustache = {\r\n  name: 'mustache.js',\r\n  version: '4.2.0',\r\n  tags: [ '{{', '}}' ],\r\n  clearCache: undefined,\r\n  escape: undefined,\r\n  parse: undefined,\r\n  render: undefined,\r\n  Scanner: undefined,\r\n  Context: undefined,\r\n  Writer: undefined,\r\n  /**\r\n   * Allows a user to override the default caching strategy, by providing an\r\n   * object with set, get and clear methods. This can also be used to disable\r\n   * the cache by setting it to the literal `undefined`.\r\n   */\r\n  set templateCache (cache) {\r\n    defaultWriter.templateCache = cache;\r\n  },\r\n  /**\r\n   * Gets the default or overridden caching object from the default writer.\r\n   */\r\n  get templateCache () {\r\n    return defaultWriter.templateCache;\r\n  }\r\n};\r\n\r\n// All high-level mustache.* functions use this writer.\r\nvar defaultWriter = new Writer();\r\n\r\n/**\r\n * Clears all cached templates in the default writer.\r\n */\r\nmustache.clearCache = function clearCache () {\r\n  return defaultWriter.clearCache();\r\n};\r\n\r\n/**\r\n * Parses and caches the given template in the default writer and returns the\r\n * array of tokens it contains. Doing this ahead of time avoids the need to\r\n * parse templates on the fly as they are rendered.\r\n */\r\nmustache.parse = function parse (template, tags) {\r\n  return defaultWriter.parse(template, tags);\r\n};\r\n\r\n/**\r\n * Renders the `template` with the given `view`, `partials`, and `config`\r\n * using the default writer.\r\n */\r\nmustache.render = function render (template, view, partials, config) {\r\n  if (typeof template !== 'string') {\r\n    throw new TypeError('Invalid template! Template should be a \"string\" ' +\r\n                        'but \"' + typeStr(template) + '\" was given as the first ' +\r\n                        'argument for mustache#render(template, view, partials)');\r\n  }\r\n\r\n  return defaultWriter.render(template, view, partials, config);\r\n};\r\n\r\n// Export the escaping function so that the user may override it.\r\n// See https://github.com/janl/mustache.js/issues/244\r\nmustache.escape = escapeHtml;\r\n\r\n// Export these mainly for testing, but also for advanced usage.\r\nmustache.Scanner = Scanner;\r\nmustache.Context = Context;\r\nmustache.Writer = Writer;\r\n\r\nexport default mustache;","import mustache from \"./libs/mustache.js\";\r\n\r\nimport {contexts} from \"./app.js\";\r\n\r\nexport const events = {\r\n    click: {},\r\n    change: {}\r\n};\r\n\r\nevents.click.addRow = (source, e) =>{\r\n\r\n    if(contexts.rowTemplate.length == 0)\r\n    {\r\n        let newData = document.querySelector(\"#ExtraColumnTemplate\").innerHTML;\r\n        contexts.rowTemplate.push(newData);\r\n    }\r\n\r\n    outputTemplate = contexts.rowTemplate.join(\"<!-- | -->\");\r\n\r\n};\r\n\r\n\r\nevents.click.addColumn = (source, e) => {\r\n\r\n    let newData = document.querySelector(\"#ExtraColumnTemplate\").innerHTML;\r\n\r\n    let newHeader = newData.replace(\"td>\",\"th>\");\r\n\r\n    let headRow = document.querySelector(\"#out_thead tr\");\r\n    let bodyRows = document.querySelectorAll(\"#out_tbody tr\");\r\n\r\n    headRow.innerHTML = headRow.innerHTML + newHeader;\r\n\r\n    bodyRows.forEach((el)=>{\r\n        el.innerHTML = el.innerHTML + newData;\r\n    });\r\n\r\n    contexts.columnCount++;\r\n    contexts.updateRows(newData);\r\n\r\n    console.log(contexts);\r\n};\r\n\r\nevents.click.addTableData = (source, e) => {\r\n\r\n    let template = document.querySelector(\"#ExtraColumnTemplate\");\r\n\r\n    let newContent = template.content.cloneNode(true);\r\n\r\n    let thisRow = source.parentNode.parentNode;\r\n\r\n    thisRow.appendChild(newContent);\r\n\r\n    let headRow = document.querySelector(\"#out_thead tr\");\r\n\r\n    let currentCount = headRow.children.length;\r\n    let newCount = thisRow.children.length;\r\n\r\n    if (newCount > currentCount) {\r\n        headRow.innerHTML = headRow.innerHTML + `<th><button data-click=\"deleteColumn\" title=\"Delete\">-</button>Heading</th>`;\r\n    }\r\n};\r\n\r\nevents.click.deleteTableData = (source, e) => {\r\n    //TODO: Make this more specific so it truly only deletes the correct element.\r\n    source.parentNode.parentNode.removeChild(source.parentNode);\r\n\r\n};","import mustache from \"./libs/mustache.js\";\r\n\r\nimport {contexts} from \"./app.js\";\r\n\r\nimport {events} from \"./helper_events.js\";\r\n\r\nexport const UI = { set: {}, get: {} };\r\n\r\nUI.get = {\r\n    innerHTML: (source) => {\r\n        return source.innerHTML;\r\n    },\r\n    textContent: (source) => {\r\n        return source.textContent;\r\n    },\r\n    value: (source) => {\r\n        return source.value;\r\n    },\r\n    template: (source) => {\r\n\r\n        let selector = `[data-for='${source.id || source.name}']`;\r\n\r\n        let html = document.querySelector(selector).innerHTML;\r\n\r\n        let rendered = mustache.render(html, contexts);\r\n\r\n        return rendered;\r\n    }\r\n}\r\n\r\nUI.set = {\r\n    innerHTML: (target, data) => {\r\n        target.innerHTML = data;\r\n        return `target HTML is now ${data}`;\r\n    },\r\n    textContent: (target, data) => {\r\n        target.textContent = data;\r\n        return `target text is now ${data}`;\r\n    },\r\n    value: (target, data) => {\r\n        target.value = data;\r\n        return `target value is now ${data}`;\r\n    }\r\n}\r\n\r\nUI.add = {\r\n    innerHTML: (target, data) => {\r\n        target.innerHTML = target.innerHTML + data;\r\n    },\r\n    textContent: (target, data) => {\r\n        target.textContent = target.textContent + data;\r\n    },\r\n    value: (target, data) => {\r\n        target.value = target.value + data;\r\n    }\r\n}\r\n\r\nconst closeModal = ()=>{\r\n    document.getElementById(\"ModalWrapper\")?.remove();\r\n};\r\n\r\nUI.modal = (content)=>{\r\n\r\n    events.click.closeModal = events.click.closeModal || closeModal;\r\n\r\n    let template = `<div data-click=\"closeModal\" id=\"ModalContent\">${content}</div>`;\r\n    \r\n    let wrapper = document.createElement(\"div\");\r\n    \r\n    wrapper.id=\"ModalWrapper\";\r\n    \r\n    wrapper.dataset.click = \"closeModal\";\r\n    \r\n    wrapper.innerHTML = template;\r\n    \r\n    document.body.appendChild(wrapper);\r\n};\r\n\r\nUI.alert = (message)=>{\r\n    let template = `<div id=\"Alert\">${message}<hr><button data-click=\"closeModal\">Okay</button></div>`;\r\n\r\n    UI.modal(template);\r\n};\r\n\r\nwindow.shout = UI.modal;\r\nwindow.scream = UI.alert;","import {UI} from './helper_ui.js';\r\n\r\nexport const appBindings = {};\r\n\r\nexport class binding {\r\n    constructor(sourceElement, bindingString) {\r\n\r\n        let values = bindingString.split(\" of \").join(\",\").split(\" with \").join(\",\").split(\": \").join(\",\").split(\",\");\r\n\r\n        this.method = values[0];\r\n        this.targetData = values[1];\r\n        this.targetSelector = values[2].replace(\"{\",\"\").replace(\"}\",\"\");\r\n        this.sourceData = values[3];\r\n        this.source = sourceElement;\r\n        this.history = [];\r\n        appBindings[this.source.id || this.source.name] = this;\r\n    }\r\n\r\n    replace = () => {\r\n\r\n        let target = document.querySelector(this.targetSelector);\r\n\r\n        let data = UI.get[this.sourceData]?.(this.source);\r\n\r\n        let result = UI.set[this.targetData]?.(target, data);\r\n\r\n        this.history.push(result);\r\n    };\r\n\r\n    insert = () => {\r\n\r\n        let target = document.querySelector(this.targetSelector);\r\n\r\n        let data = UI.get[this.sourceData]?.(this.source);\r\n\r\n        let result = UI.add[this.targetData]?.(target, data);\r\n\r\n        this.history.push(result);\r\n    }\r\n\r\n    update = () => {\r\n        this[this.method]?.();\r\n    }\r\n\r\n}","\r\nimport { appBindings, binding } from './helper_bindings.js';\r\n\r\nimport { events } from './helper_events.js';\r\n\r\nclass context {\r\n\r\n    constructor() {\r\n\r\n        this.columnCount = 1;\r\n        this.rowCount = 1;\r\n        this.headerTemplate = \"\";\r\n        this.rowTemplate = \"\";\r\n        this.columns = [];\r\n        this.rows = [];\r\n    }\r\n    updateColumns = (data) => {\r\n        this.columns.push(data);\r\n    }\r\n\r\n    updateRows = (data) => {\r\n        this.rows.push(data);\r\n        this.rowTemplate = this.rows.join(\"<!--|-->\");\r\n    }\r\n};\r\n\r\nexport const contexts = new context();\r\n\r\n\r\nif (contexts.rowTemplate.length == 0) {\r\n    let newData = document.querySelector(\"#ExtraColumnTemplate\").innerHTML;\r\n    contexts.updateRows(newData);\r\n    console.log(contexts);\r\n}\r\n\r\n\r\n\r\nfunction executeBinding(source, type) {\r\n\r\n    let bindingString = source.dataset[type];\r\n\r\n    if (!bindingString) return false;\r\n\r\n    if (!bindingString.includes(\":\")) return false;\r\n\r\n    let targetBinding = appBindings[source.id || source.name] ?? new binding(source, bindingString);\r\n\r\n    targetBinding.update();\r\n}\r\n\r\ndocument.body.addEventListener(\"keyup\", (e) => {\r\n\r\n    let source = e.target;\r\n\r\n    executeBinding(source, \"keyup\");\r\n});\r\n\r\ndocument.body.addEventListener(\"change\", (e) => {\r\n\r\n    let source = e.target;\r\n\r\n    events.change[source.dataset.change]?.(source, e);\r\n\r\n    executeBinding(source, \"change\");\r\n});\r\n\r\ndocument.body.addEventListener(\"click\", (e) => {\r\n\r\n    let source = e.target;\r\n\r\n    events.click[source.dataset.click]?.(source, e);\r\n\r\n    executeBinding(source, \"click\");\r\n});\r\n"],"names":["$258c17cc3ef9b5c030d5e234766472a1$var$objectToString","Object","prototype","toString","$258c17cc3ef9b5c030d5e234766472a1$var$isArray","Array","isArray","object","call","$258c17cc3ef9b5c030d5e234766472a1$var$isFunction","$258c17cc3ef9b5c030d5e234766472a1$var$escapeRegExp","string","replace","$258c17cc3ef9b5c030d5e234766472a1$var$hasProperty","obj","propName","$258c17cc3ef9b5c030d5e234766472a1$var$_typeof","$258c17cc3ef9b5c030d5e234766472a1$var$regExpTest","RegExp","test","$258c17cc3ef9b5c030d5e234766472a1$var$nonSpaceRe","$258c17cc3ef9b5c030d5e234766472a1$var$isWhitespace","re","$258c17cc3ef9b5c030d5e234766472a1$var$testRegExp","$258c17cc3ef9b5c030d5e234766472a1$var$entityMap","&","<",">","\"","'","/","`","=","$258c17cc3ef9b5c030d5e234766472a1$var$whiteRe","$258c17cc3ef9b5c030d5e234766472a1$var$spaceRe","$258c17cc3ef9b5c030d5e234766472a1$var$equalsRe","$258c17cc3ef9b5c030d5e234766472a1$var$curlyRe","$258c17cc3ef9b5c030d5e234766472a1$var$tagRe","$258c17cc3ef9b5c030d5e234766472a1$var$Scanner","this","tail","pos","$258c17cc3ef9b5c030d5e234766472a1$var$Context","view","parentContext","cache",".","parent","$258c17cc3ef9b5c030d5e234766472a1$var$Writer","templateCache","_cache","set","key","value","get","clear","eos","scan","match","index","substring","length","scanUntil","search","push","lookup","name","primitive","hasOwnProperty","intermediateValue","names","context","lookupHit","indexOf","split","clearCache","parse","template","tags","cacheKey","$258c17cc3ef9b5c030d5e234766472a1$export$default","join","isCacheEnabled","tokens","undefined","openingTagRe","closingTagRe","closingCurlyRe","lineHasNonSpace","sections","spaces","hasTag","nonSpace","indentation","tagIndex","stripSpace","pop","compileTags","tagsToCompile","Error","start","type","chr","token","openSection","scanner","i","valueLength","charAt","nestedTokens","collector","numTokens","$258c17cc3ef9b5c030d5e234766472a1$var$nestTokens","lastToken","squashedTokens","$258c17cc3ef9b5c030d5e234766472a1$var$squashTokens","$258c17cc3ef9b5c030d5e234766472a1$var$parseTemplate","render","partials","config","getConfigTags","renderTokens","originalTemplate","symbol","buffer","renderSection","renderInverted","renderPartial","unescapedValue","escapedValue","rawValue","self","j","slice","indentPartial","partial","filteredIndentation","partialByNl","indentedValue","escape","getConfigEscape","String","version","Scanner","Context","Writer","$258c17cc3ef9b5c030d5e234766472a1$var$defaultWriter","TypeError","s","$f0bd717b52b5f644c398e72eed2157a0$export$events","click","change","addRow","source","e","rowTemplate","newData","document","querySelector","innerHTML","outputTemplate","addColumn","newHeader","headRow","bodyRows","querySelectorAll","forEach","el","columnCount","updateRows","console","log","addTableData","newContent","content","cloneNode","thisRow","parentNode","appendChild","currentCount","children","deleteTableData","removeChild","$9c848dccf98dd18b0faad7dbbfb69e65$export$UI","textContent","selector","id","html","rendered","target","data","add","$9c848dccf98dd18b0faad7dbbfb69e65$var$closeModal","getElementById","_document$getElementB","remove","modal","closeModal","wrapper","createElement","dataset","body","alert","message","window","shout","scream","$13d95db2b4618feb83573a57b14b0ce3$export$appBindings","$13d95db2b4618feb83573a57b14b0ce3$export$binding","binding","sourceElement","bindingString","_this","targetSelector","sourceData","result","targetData","history","method","values","contexts","columns","rows","rowCount","headerTemplate","$3b6f4db5da704fba36e4fd25cb4a19ee$var$executeBinding","includes","targetBinding","update","addEventListener"],"version":3,"file":"index.js.map"}