{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-9a076ba6b2828ae7.js","node_modules/@parcel/runtime-js/lib/runtime-c9f9844c98871985.js","scripts/libs/mustache.js","scripts/helper_ui.js","scripts/helper_events.js","scripts/class_Benchmark.js","scripts/app.js","scripts/class_SimpleTable.js"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"eVdPX\"))).then(() => parcelRequire('3k38T'));","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"6M4Po\\\":\\\"index.44a8a3cd.js\\\",\\\"eVdPX\\\":\\\"setup_gadget.353a4a4c.js\\\"}\"));","/*!\r\n * mustache.js - Logic-less {{mustache}} templates with JavaScript\r\n * http://github.com/janl/mustache.js\r\n */\r\n\r\nvar objectToString = Object.prototype.toString;\r\nvar isArray = Array.isArray || function isArrayPolyfill (object) {\r\n  return objectToString.call(object) === '[object Array]';\r\n};\r\n\r\nfunction isFunction (object) {\r\n  return typeof object === 'function';\r\n}\r\n\r\n/**\r\n * More correct typeof string handling array\r\n * which normally returns typeof 'object'\r\n */\r\nfunction typeStr (obj) {\r\n  return isArray(obj) ? 'array' : typeof obj;\r\n}\r\n\r\nfunction escapeRegExp (string) {\r\n  return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\r\n}\r\n\r\n/**\r\n * Null safe way of checking whether or not an object,\r\n * including its prototype, has a given property\r\n */\r\nfunction hasProperty (obj, propName) {\r\n  return obj != null && typeof obj === 'object' && (propName in obj);\r\n}\r\n\r\n/**\r\n * Safe way of detecting whether or not the given thing is a primitive and\r\n * whether it has the given property\r\n */\r\nfunction primitiveHasOwnProperty (primitive, propName) {\r\n  return (\r\n    primitive != null\r\n    && typeof primitive !== 'object'\r\n    && primitive.hasOwnProperty\r\n    && primitive.hasOwnProperty(propName)\r\n  );\r\n}\r\n\r\n// Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\r\n// See https://github.com/janl/mustache.js/issues/189\r\nvar regExpTest = RegExp.prototype.test;\r\nfunction testRegExp (re, string) {\r\n  return regExpTest.call(re, string);\r\n}\r\n\r\nvar nonSpaceRe = /\\S/;\r\nfunction isWhitespace (string) {\r\n  return !testRegExp(nonSpaceRe, string);\r\n}\r\n\r\nvar entityMap = {\r\n  '&': '&amp;',\r\n  '<': '&lt;',\r\n  '>': '&gt;',\r\n  '\"': '&quot;',\r\n  \"'\": '&#39;',\r\n  '/': '&#x2F;',\r\n  '`': '&#x60;',\r\n  '=': '&#x3D;'\r\n};\r\n\r\nfunction escapeHtml (string) {\r\n  return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap (s) {\r\n    return entityMap[s];\r\n  });\r\n}\r\n\r\nvar whiteRe = /\\s*/;\r\nvar spaceRe = /\\s+/;\r\nvar equalsRe = /\\s*=/;\r\nvar curlyRe = /\\s*\\}/;\r\nvar tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\r\n\r\n/**\r\n * Breaks up the given `template` string into a tree of tokens. If the `tags`\r\n * argument is given here it must be an array with two string values: the\r\n * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\r\n * course, the default is to use mustaches (i.e. mustache.tags).\r\n *\r\n * A token is an array with at least 4 elements. The first element is the\r\n * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\r\n * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\r\n * all text that appears outside a symbol this element is \"text\".\r\n *\r\n * The second element of a token is its \"value\". For mustache tags this is\r\n * whatever else was inside the tag besides the opening symbol. For text tokens\r\n * this is the text itself.\r\n *\r\n * The third and fourth elements of the token are the start and end indices,\r\n * respectively, of the token in the original template.\r\n *\r\n * Tokens that are the root node of a subtree contain two more elements: 1) an\r\n * array of tokens in the subtree and 2) the index in the original template at\r\n * which the closing tag for that section begins.\r\n *\r\n * Tokens for partials also contain two more elements: 1) a string value of\r\n * indendation prior to that tag and 2) the index of that tag on that line -\r\n * eg a value of 2 indicates the partial is the third tag on this line.\r\n */\r\nfunction parseTemplate (template, tags) {\r\n  if (!template)\r\n    return [];\r\n  var lineHasNonSpace = false;\r\n  var sections = [];     // Stack to hold section tokens\r\n  var tokens = [];       // Buffer to hold the tokens\r\n  var spaces = [];       // Indices of whitespace tokens on the current line\r\n  var hasTag = false;    // Is there a {{tag}} on the current line?\r\n  var nonSpace = false;  // Is there a non-space char on the current line?\r\n  var indentation = '';  // Tracks indentation for tags that use it\r\n  var tagIndex = 0;      // Stores a count of number of tags encountered on a line\r\n\r\n  // Strips all whitespace tokens array for the current line\r\n  // if there was a {{#tag}} on it and otherwise only space.\r\n  function stripSpace () {\r\n    if (hasTag && !nonSpace) {\r\n      while (spaces.length)\r\n        delete tokens[spaces.pop()];\r\n    } else {\r\n      spaces = [];\r\n    }\r\n\r\n    hasTag = false;\r\n    nonSpace = false;\r\n  }\r\n\r\n  var openingTagRe, closingTagRe, closingCurlyRe;\r\n  function compileTags (tagsToCompile) {\r\n    if (typeof tagsToCompile === 'string')\r\n      tagsToCompile = tagsToCompile.split(spaceRe, 2);\r\n\r\n    if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)\r\n      throw new Error('Invalid tags: ' + tagsToCompile);\r\n\r\n    openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\r\n    closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\r\n    closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\r\n  }\r\n\r\n  compileTags(tags || mustache.tags);\r\n\r\n  var scanner = new Scanner(template);\r\n\r\n  var start, type, value, chr, token, openSection;\r\n  while (!scanner.eos()) {\r\n    start = scanner.pos;\r\n\r\n    // Match any text between tags.\r\n    value = scanner.scanUntil(openingTagRe);\r\n\r\n    if (value) {\r\n      for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\r\n        chr = value.charAt(i);\r\n\r\n        if (isWhitespace(chr)) {\r\n          spaces.push(tokens.length);\r\n          indentation += chr;\r\n        } else {\r\n          nonSpace = true;\r\n          lineHasNonSpace = true;\r\n          indentation += ' ';\r\n        }\r\n\r\n        tokens.push([ 'text', chr, start, start + 1 ]);\r\n        start += 1;\r\n\r\n        // Check for whitespace on the current line.\r\n        if (chr === '\\n') {\r\n          stripSpace();\r\n          indentation = '';\r\n          tagIndex = 0;\r\n          lineHasNonSpace = false;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Match the opening tag.\r\n    if (!scanner.scan(openingTagRe))\r\n      break;\r\n\r\n    hasTag = true;\r\n\r\n    // Get the tag type.\r\n    type = scanner.scan(tagRe) || 'name';\r\n    scanner.scan(whiteRe);\r\n\r\n    // Get the tag value.\r\n    if (type === '=') {\r\n      value = scanner.scanUntil(equalsRe);\r\n      scanner.scan(equalsRe);\r\n      scanner.scanUntil(closingTagRe);\r\n    } else if (type === '{') {\r\n      value = scanner.scanUntil(closingCurlyRe);\r\n      scanner.scan(curlyRe);\r\n      scanner.scanUntil(closingTagRe);\r\n      type = '&';\r\n    } else {\r\n      value = scanner.scanUntil(closingTagRe);\r\n    }\r\n\r\n    // Match the closing tag.\r\n    if (!scanner.scan(closingTagRe))\r\n      throw new Error('Unclosed tag at ' + scanner.pos);\r\n\r\n    if (type == '>') {\r\n      token = [ type, value, start, scanner.pos, indentation, tagIndex, lineHasNonSpace ];\r\n    } else {\r\n      token = [ type, value, start, scanner.pos ];\r\n    }\r\n    tagIndex++;\r\n    tokens.push(token);\r\n\r\n    if (type === '#' || type === '^') {\r\n      sections.push(token);\r\n    } else if (type === '/') {\r\n      // Check section nesting.\r\n      openSection = sections.pop();\r\n\r\n      if (!openSection)\r\n        throw new Error('Unopened section \"' + value + '\" at ' + start);\r\n\r\n      if (openSection[1] !== value)\r\n        throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\r\n    } else if (type === 'name' || type === '{' || type === '&') {\r\n      nonSpace = true;\r\n    } else if (type === '=') {\r\n      // Set the tags for the next time around.\r\n      compileTags(value);\r\n    }\r\n  }\r\n\r\n  stripSpace();\r\n\r\n  // Make sure there are no open sections when we're done.\r\n  openSection = sections.pop();\r\n\r\n  if (openSection)\r\n    throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\r\n\r\n  return nestTokens(squashTokens(tokens));\r\n}\r\n\r\n/**\r\n * Combines the values of consecutive text tokens in the given `tokens` array\r\n * to a single token.\r\n */\r\nfunction squashTokens (tokens) {\r\n  var squashedTokens = [];\r\n\r\n  var token, lastToken;\r\n  for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\r\n    token = tokens[i];\r\n\r\n    if (token) {\r\n      if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\r\n        lastToken[1] += token[1];\r\n        lastToken[3] = token[3];\r\n      } else {\r\n        squashedTokens.push(token);\r\n        lastToken = token;\r\n      }\r\n    }\r\n  }\r\n\r\n  return squashedTokens;\r\n}\r\n\r\n/**\r\n * Forms the given array of `tokens` into a nested tree structure where\r\n * tokens that represent a section have two additional items: 1) an array of\r\n * all tokens that appear in that section and 2) the index in the original\r\n * template that represents the end of that section.\r\n */\r\nfunction nestTokens (tokens) {\r\n  var nestedTokens = [];\r\n  var collector = nestedTokens;\r\n  var sections = [];\r\n\r\n  var token, section;\r\n  for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\r\n    token = tokens[i];\r\n\r\n    switch (token[0]) {\r\n      case '#':\r\n      case '^':\r\n        collector.push(token);\r\n        sections.push(token);\r\n        collector = token[4] = [];\r\n        break;\r\n      case '/':\r\n        section = sections.pop();\r\n        section[5] = token[2];\r\n        collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\r\n        break;\r\n      default:\r\n        collector.push(token);\r\n    }\r\n  }\r\n\r\n  return nestedTokens;\r\n}\r\n\r\n/**\r\n * A simple string scanner that is used by the template parser to find\r\n * tokens in template strings.\r\n */\r\nfunction Scanner (string) {\r\n  this.string = string;\r\n  this.tail = string;\r\n  this.pos = 0;\r\n}\r\n\r\n/**\r\n * Returns `true` if the tail is empty (end of string).\r\n */\r\nScanner.prototype.eos = function eos () {\r\n  return this.tail === '';\r\n};\r\n\r\n/**\r\n * Tries to match the given regular expression at the current position.\r\n * Returns the matched text if it can match, the empty string otherwise.\r\n */\r\nScanner.prototype.scan = function scan (re) {\r\n  var match = this.tail.match(re);\r\n\r\n  if (!match || match.index !== 0)\r\n    return '';\r\n\r\n  var string = match[0];\r\n\r\n  this.tail = this.tail.substring(string.length);\r\n  this.pos += string.length;\r\n\r\n  return string;\r\n};\r\n\r\n/**\r\n * Skips all text until the given regular expression can be matched. Returns\r\n * the skipped string, which is the entire tail if no match can be made.\r\n */\r\nScanner.prototype.scanUntil = function scanUntil (re) {\r\n  var index = this.tail.search(re), match;\r\n\r\n  switch (index) {\r\n    case -1:\r\n      match = this.tail;\r\n      this.tail = '';\r\n      break;\r\n    case 0:\r\n      match = '';\r\n      break;\r\n    default:\r\n      match = this.tail.substring(0, index);\r\n      this.tail = this.tail.substring(index);\r\n  }\r\n\r\n  this.pos += match.length;\r\n\r\n  return match;\r\n};\r\n\r\n/**\r\n * Represents a rendering context by wrapping a view object and\r\n * maintaining a reference to the parent context.\r\n */\r\nfunction Context (view, parentContext) {\r\n  this.view = view;\r\n  this.cache = { '.': this.view };\r\n  this.parent = parentContext;\r\n}\r\n\r\n/**\r\n * Creates a new context using the given view with this context\r\n * as the parent.\r\n */\r\nContext.prototype.push = function push (view) {\r\n  return new Context(view, this);\r\n};\r\n\r\n/**\r\n * Returns the value of the given name in this context, traversing\r\n * up the context hierarchy if the value is absent in this context's view.\r\n */\r\nContext.prototype.lookup = function lookup (name) {\r\n  var cache = this.cache;\r\n\r\n  var value;\r\n  if (cache.hasOwnProperty(name)) {\r\n    value = cache[name];\r\n  } else {\r\n    var context = this, intermediateValue, names, index, lookupHit = false;\r\n\r\n    while (context) {\r\n      if (name.indexOf('.') > 0) {\r\n        intermediateValue = context.view;\r\n        names = name.split('.');\r\n        index = 0;\r\n\r\n        /**\r\n         * Using the dot notion path in `name`, we descend through the\r\n         * nested objects.\r\n         *\r\n         * To be certain that the lookup has been successful, we have to\r\n         * check if the last object in the path actually has the property\r\n         * we are looking for. We store the result in `lookupHit`.\r\n         *\r\n         * This is specially necessary for when the value has been set to\r\n         * `undefined` and we want to avoid looking up parent contexts.\r\n         *\r\n         * In the case where dot notation is used, we consider the lookup\r\n         * to be successful even if the last \"object\" in the path is\r\n         * not actually an object but a primitive (e.g., a string, or an\r\n         * integer), because it is sometimes useful to access a property\r\n         * of an autoboxed primitive, such as the length of a string.\r\n         **/\r\n        while (intermediateValue != null && index < names.length) {\r\n          if (index === names.length - 1)\r\n            lookupHit = (\r\n              hasProperty(intermediateValue, names[index])\r\n              || primitiveHasOwnProperty(intermediateValue, names[index])\r\n            );\r\n\r\n          intermediateValue = intermediateValue[names[index++]];\r\n        }\r\n      } else {\r\n        intermediateValue = context.view[name];\r\n\r\n        /**\r\n         * Only checking against `hasProperty`, which always returns `false` if\r\n         * `context.view` is not an object. Deliberately omitting the check\r\n         * against `primitiveHasOwnProperty` if dot notation is not used.\r\n         *\r\n         * Consider this example:\r\n         * ```\r\n         * Mustache.render(\"The length of a football field is {{#length}}{{length}}{{/length}}.\", {length: \"100 yards\"})\r\n         * ```\r\n         *\r\n         * If we were to check also against `primitiveHasOwnProperty`, as we do\r\n         * in the dot notation case, then render call would return:\r\n         *\r\n         * \"The length of a football field is 9.\"\r\n         *\r\n         * rather than the expected:\r\n         *\r\n         * \"The length of a football field is 100 yards.\"\r\n         **/\r\n        lookupHit = hasProperty(context.view, name);\r\n      }\r\n\r\n      if (lookupHit) {\r\n        value = intermediateValue;\r\n        break;\r\n      }\r\n\r\n      context = context.parent;\r\n    }\r\n\r\n    cache[name] = value;\r\n  }\r\n\r\n  if (isFunction(value))\r\n    value = value.call(this.view);\r\n\r\n  return value;\r\n};\r\n\r\n/**\r\n * A Writer knows how to take a stream of tokens and render them to a\r\n * string, given a context. It also maintains a cache of templates to\r\n * avoid the need to parse the same template twice.\r\n */\r\nfunction Writer () {\r\n  this.templateCache = {\r\n    _cache: {},\r\n    set: function set (key, value) {\r\n      this._cache[key] = value;\r\n    },\r\n    get: function get (key) {\r\n      return this._cache[key];\r\n    },\r\n    clear: function clear () {\r\n      this._cache = {};\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Clears all cached templates in this writer.\r\n */\r\nWriter.prototype.clearCache = function clearCache () {\r\n  if (typeof this.templateCache !== 'undefined') {\r\n    this.templateCache.clear();\r\n  }\r\n};\r\n\r\n/**\r\n * Parses and caches the given `template` according to the given `tags` or\r\n * `mustache.tags` if `tags` is omitted,  and returns the array of tokens\r\n * that is generated from the parse.\r\n */\r\nWriter.prototype.parse = function parse (template, tags) {\r\n  var cache = this.templateCache;\r\n  var cacheKey = template + ':' + (tags || mustache.tags).join(':');\r\n  var isCacheEnabled = typeof cache !== 'undefined';\r\n  var tokens = isCacheEnabled ? cache.get(cacheKey) : undefined;\r\n\r\n  if (tokens == undefined) {\r\n    tokens = parseTemplate(template, tags);\r\n    isCacheEnabled && cache.set(cacheKey, tokens);\r\n  }\r\n  return tokens;\r\n};\r\n\r\n/**\r\n * High-level method that is used to render the given `template` with\r\n * the given `view`.\r\n *\r\n * The optional `partials` argument may be an object that contains the\r\n * names and templates of partials that are used in the template. It may\r\n * also be a function that is used to load partial templates on the fly\r\n * that takes a single argument: the name of the partial.\r\n *\r\n * If the optional `config` argument is given here, then it should be an\r\n * object with a `tags` attribute or an `escape` attribute or both.\r\n * If an array is passed, then it will be interpreted the same way as\r\n * a `tags` attribute on a `config` object.\r\n *\r\n * The `tags` attribute of a `config` object must be an array with two\r\n * string values: the opening and closing tags used in the template (e.g.\r\n * [ \"<%\", \"%>\" ]). The default is to mustache.tags.\r\n *\r\n * The `escape` attribute of a `config` object must be a function which\r\n * accepts a string as input and outputs a safely escaped string.\r\n * If an `escape` function is not provided, then an HTML-safe string\r\n * escaping function is used as the default.\r\n */\r\nWriter.prototype.render = function render (template, view, partials, config) {\r\n  var tags = this.getConfigTags(config);\r\n  var tokens = this.parse(template, tags);\r\n  var context = (view instanceof Context) ? view : new Context(view, undefined);\r\n  return this.renderTokens(tokens, context, partials, template, config);\r\n};\r\n\r\n/**\r\n * Low-level method that renders the given array of `tokens` using\r\n * the given `context` and `partials`.\r\n *\r\n * Note: The `originalTemplate` is only ever used to extract the portion\r\n * of the original template that was contained in a higher-order section.\r\n * If the template doesn't use higher-order sections, this argument may\r\n * be omitted.\r\n */\r\nWriter.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate, config) {\r\n  var buffer = '';\r\n\r\n  var token, symbol, value;\r\n  for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\r\n    value = undefined;\r\n    token = tokens[i];\r\n    symbol = token[0];\r\n\r\n    if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate, config);\r\n    else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate, config);\r\n    else if (symbol === '>') value = this.renderPartial(token, context, partials, config);\r\n    else if (symbol === '&') value = this.unescapedValue(token, context);\r\n    else if (symbol === 'name') value = this.escapedValue(token, context, config);\r\n    else if (symbol === 'text') value = this.rawValue(token);\r\n\r\n    if (value !== undefined)\r\n      buffer += value;\r\n  }\r\n\r\n  return buffer;\r\n};\r\n\r\nWriter.prototype.renderSection = function renderSection (token, context, partials, originalTemplate, config) {\r\n  var self = this;\r\n  var buffer = '';\r\n  var value = context.lookup(token[1]);\r\n\r\n  // This function is used to render an arbitrary template\r\n  // in the current context by higher-order sections.\r\n  function subRender (template) {\r\n    return self.render(template, context, partials, config);\r\n  }\r\n\r\n  if (!value) return;\r\n\r\n  if (isArray(value)) {\r\n    for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\r\n      buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate, config);\r\n    }\r\n  } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {\r\n    buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate, config);\r\n  } else if (isFunction(value)) {\r\n    if (typeof originalTemplate !== 'string')\r\n      throw new Error('Cannot use higher-order sections without the original template');\r\n\r\n    // Extract the portion of the original template that the section contains.\r\n    value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\r\n\r\n    if (value != null)\r\n      buffer += value;\r\n  } else {\r\n    buffer += this.renderTokens(token[4], context, partials, originalTemplate, config);\r\n  }\r\n  return buffer;\r\n};\r\n\r\nWriter.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate, config) {\r\n  var value = context.lookup(token[1]);\r\n\r\n  // Use JavaScript's definition of falsy. Include empty arrays.\r\n  // See https://github.com/janl/mustache.js/issues/186\r\n  if (!value || (isArray(value) && value.length === 0))\r\n    return this.renderTokens(token[4], context, partials, originalTemplate, config);\r\n};\r\n\r\nWriter.prototype.indentPartial = function indentPartial (partial, indentation, lineHasNonSpace) {\r\n  var filteredIndentation = indentation.replace(/[^ \\t]/g, '');\r\n  var partialByNl = partial.split('\\n');\r\n  for (var i = 0; i < partialByNl.length; i++) {\r\n    if (partialByNl[i].length && (i > 0 || !lineHasNonSpace)) {\r\n      partialByNl[i] = filteredIndentation + partialByNl[i];\r\n    }\r\n  }\r\n  return partialByNl.join('\\n');\r\n};\r\n\r\nWriter.prototype.renderPartial = function renderPartial (token, context, partials, config) {\r\n  if (!partials) return;\r\n  var tags = this.getConfigTags(config);\r\n\r\n  var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\r\n  if (value != null) {\r\n    var lineHasNonSpace = token[6];\r\n    var tagIndex = token[5];\r\n    var indentation = token[4];\r\n    var indentedValue = value;\r\n    if (tagIndex == 0 && indentation) {\r\n      indentedValue = this.indentPartial(value, indentation, lineHasNonSpace);\r\n    }\r\n    var tokens = this.parse(indentedValue, tags);\r\n    return this.renderTokens(tokens, context, partials, indentedValue, config);\r\n  }\r\n};\r\n\r\nWriter.prototype.unescapedValue = function unescapedValue (token, context) {\r\n  var value = context.lookup(token[1]);\r\n  if (value != null)\r\n    return value;\r\n};\r\n\r\nWriter.prototype.escapedValue = function escapedValue (token, context, config) {\r\n  var escape = this.getConfigEscape(config) || mustache.escape;\r\n  var value = context.lookup(token[1]);\r\n  if (value != null)\r\n    return (typeof value === 'number' && escape === mustache.escape) ? String(value) : escape(value);\r\n};\r\n\r\nWriter.prototype.rawValue = function rawValue (token) {\r\n  return token[1];\r\n};\r\n\r\nWriter.prototype.getConfigTags = function getConfigTags (config) {\r\n  if (isArray(config)) {\r\n    return config;\r\n  }\r\n  else if (config && typeof config === 'object') {\r\n    return config.tags;\r\n  }\r\n  else {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nWriter.prototype.getConfigEscape = function getConfigEscape (config) {\r\n  if (config && typeof config === 'object' && !isArray(config)) {\r\n    return config.escape;\r\n  }\r\n  else {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nvar mustache = {\r\n  name: 'mustache.js',\r\n  version: '4.2.0',\r\n  tags: [ '{{', '}}' ],\r\n  clearCache: undefined,\r\n  escape: undefined,\r\n  parse: undefined,\r\n  render: undefined,\r\n  Scanner: undefined,\r\n  Context: undefined,\r\n  Writer: undefined,\r\n  /**\r\n   * Allows a user to override the default caching strategy, by providing an\r\n   * object with set, get and clear methods. This can also be used to disable\r\n   * the cache by setting it to the literal `undefined`.\r\n   */\r\n  set templateCache (cache) {\r\n    defaultWriter.templateCache = cache;\r\n  },\r\n  /**\r\n   * Gets the default or overridden caching object from the default writer.\r\n   */\r\n  get templateCache () {\r\n    return defaultWriter.templateCache;\r\n  }\r\n};\r\n\r\n// All high-level mustache.* functions use this writer.\r\nvar defaultWriter = new Writer();\r\n\r\n/**\r\n * Clears all cached templates in the default writer.\r\n */\r\nmustache.clearCache = function clearCache () {\r\n  return defaultWriter.clearCache();\r\n};\r\n\r\n/**\r\n * Parses and caches the given template in the default writer and returns the\r\n * array of tokens it contains. Doing this ahead of time avoids the need to\r\n * parse templates on the fly as they are rendered.\r\n */\r\nmustache.parse = function parse (template, tags) {\r\n  return defaultWriter.parse(template, tags);\r\n};\r\n\r\n/**\r\n * Renders the `template` with the given `view`, `partials`, and `config`\r\n * using the default writer.\r\n */\r\nmustache.render = function render (template, view, partials, config) {\r\n  if (typeof template !== 'string') {\r\n    throw new TypeError('Invalid template! Template should be a \"string\" ' +\r\n                        'but \"' + typeStr(template) + '\" was given as the first ' +\r\n                        'argument for mustache#render(template, view, partials)');\r\n  }\r\n\r\n  return defaultWriter.render(template, view, partials, config);\r\n};\r\n\r\n// Export the escaping function so that the user may override it.\r\n// See https://github.com/janl/mustache.js/issues/244\r\nmustache.escape = escapeHtml;\r\n\r\n// Export these mainly for testing, but also for advanced usage.\r\nmustache.Scanner = Scanner;\r\nmustache.Context = Context;\r\nmustache.Writer = Writer;\r\n\r\nexport default mustache;","import mustache from \"./libs/mustache.js\";\r\n\r\nimport { events } from \"./helper_events.js\";\r\n\r\nexport const UI = {};\r\n\r\nUI.get = {\r\n    innerHTML: (source) => {\r\n        return source.innerHTML;\r\n    },\r\n    textContent: (source) => {\r\n        return source.textContent;\r\n    },\r\n    value: (source) => {\r\n        return source.value;\r\n    },\r\n    template: (source) => {\r\n\r\n        let selector = `[data-for='${source.id || source.name}']`;\r\n\r\n        let html = document.querySelector(selector).innerHTML;\r\n\r\n        //TODO: Implement Context\r\n        let rendered = mustache.render(html, {});\r\n\r\n        return rendered;\r\n    }\r\n}\r\n\r\nUI.set = {\r\n    innerHTML: (target, data) => {\r\n        target.innerHTML = data;\r\n        return `target HTML is now ${data}`;\r\n    },\r\n    textContent: (target, data) => {\r\n        target.textContent = data;\r\n        return `target text is now ${data}`;\r\n    },\r\n    value: (target, data) => {\r\n        target.value = data;\r\n        return `target value is now ${data}`;\r\n    }\r\n}\r\n\r\nUI.add = {\r\n    innerHTML: (target, data) => {\r\n        target.innerHTML = target.innerHTML + data;\r\n    },\r\n    textContent: (target, data) => {\r\n        target.textContent = target.textContent + data;\r\n    },\r\n    value: (target, data) => {\r\n        target.value = target.value + data;\r\n    }\r\n}\r\n\r\nconst closeModal = () => {\r\n    document.getElementById(\"ModalWrapper\")?.remove();\r\n};\r\n\r\nUI.modal = (content) => {\r\n\r\n    events.click.closeModal = events.click.closeModal || closeModal;\r\n\r\n    let template = `<div data-click=\"closeModal\" id=\"ModalContent\">${content}</div>`;\r\n\r\n    let wrapper = document.createElement(\"div\");\r\n\r\n    wrapper.id = \"ModalWrapper\";\r\n\r\n    wrapper.dataset.click = \"closeModal\";\r\n\r\n    wrapper.innerHTML = template;\r\n\r\n    document.body.appendChild(wrapper);\r\n};\r\n\r\nUI.alert = (message) => {\r\n    let template = `<h1>Alert</h1><hr><div id=\"Alert\">${message}<hr><button data-click=\"closeModal\">Okay</button></div>`;\r\n\r\n    UI.modal(template);\r\n\r\n};\r\n\r\nUI.warning = (message) => {\r\n\r\n    let template = `<h1>Warning</h1><hr><div id=\"Warning\">${message}<hr><button data-click=\"closeModal\">Okay</button></div>`;\r\n\r\n    UI.modal(template);\r\n\r\n    return false;\r\n};\r\n\r\nUI.confirm = (message, ifYes, ifNo) => {\r\n\r\n    let template = `<h1>Confirm</h1><hr>\r\n                    <div id=\"Confirm\">${message}<hr>\r\n                    <button data-click=\"confirmYes\">Yes</button>\r\n                    <button data-click=\"confirmNo\">No</button>\r\n                    </div>`;\r\n\r\n    events.click.confirmYes = () => {\r\n        closeModal();\r\n        ifYes?.();\r\n    };\r\n\r\n    events.click.confirmNo = () => {\r\n        closeModal();\r\n        ifNo?.();\r\n    };\r\n\r\n    UI.modal(template);\r\n\r\n};\r\n\r\nUI.textInput = (callback) => {\r\n\r\n    let template = `<h2>Input Text</h2>\r\n                    <textarea id=\"TextInput\" class=\"modal-input\">Copy/Paste Here</textarea>\r\n                    <hr>\r\n                    <button data-click=\"processTextInput\">Continue</button>\r\n                    `;\r\n\r\n    events.click.processTextInput = (e) => {\r\n\r\n        let text = document.getElementById(\"TextInput\").value;\r\n\r\n        closeModal();\r\n\r\n        callback.call(e.target, text);        \r\n    };\r\n\r\n    UI.modal(template);\r\n};\r\n\r\n\r\n\r\n// Mustache\r\n\r\n// let exampleFunc =  function () {\r\n//     return function (object, render) {\r\n//         var rendered = render(object);\r\n//          return rendered;          \r\n//     };\r\n// },","import { UI } from \"./helper_ui.js\";\r\n\r\nimport { mainTable } from \"./app.js\";\r\n\r\nexport const events = {\r\n    click: {},\r\n    change: {},\r\n    keyup: {},\r\n    actions: {}\r\n};\r\n\r\nconst triggerEvent = (name, data, element) => {\r\n    let eventData = { detail: data };\r\n    let event = new CustomEvent(name, eventData);\r\n\r\n    element = element ?? document;\r\n\r\n    element.dispatchEvent?.(event, eventData);\r\n};\r\n\r\nconst triggerEventAll = (name, data, selector) => {\r\n\r\n    let elements = document.querySelectorAll(selector);\r\n\r\n    elements.forEach((item) => {\r\n        triggerEvent(name, data, item);\r\n    });\r\n\r\n};\r\n\r\nevents.click.addToPage = () => {\r\n\r\n    console.log(\"Adding HTML...\");\r\n\r\n    if (!mainTable.isValid) {\r\n        UI.warning(mainTable.validationError);\r\n        return false;\r\n    }\r\n\r\n    triggerEvent(\"gadget_insert\", mainTable.htmlOutput);\r\n};\r\n\r\nevents.actions.importHtml = (html) => {\r\n\r\n    let success = mainTable.import(html);\r\n\r\n    if (!success) {\r\n        UI.warning(\"Could Not Find Table in Imported HTML\");\r\n        return false;\r\n    }\r\n    mainTable.updateInterface();\r\n};\r\n\r\nevents.click.textInput = (source) => {\r\n\r\n    let action = source.dataset.action;\r\n\r\n    UI.textInput(function (text) {\r\n        events.actions[action]?.(text);\r\n    });\r\n};\r\n\r\nevents.click.resetTable = () => {\r\n\r\n    let message = \"Are you sure you want to reset the table? All data will be lost.\";\r\n    UI.confirm(message, () => {\r\n        mainTable.fullReset();\r\n    }, null);\r\n\r\n};\r\n\r\nevents.click.addColumn = (source) => {\r\n\r\n    if (mainTable.columns >= 10) {\r\n        UI.alert(\"Having more than 10 columns is not recommended.\");\r\n    }\r\n\r\n    let index = (source.dataset.column ?? null);\r\n\r\n    index = (index != null) ? parseInt(index) + 1 : null;\r\n\r\n    mainTable.addColumn(index);\r\n\r\n    mainTable.updateInterface([\"Header\", \"Body\"]);\r\n};\r\n\r\nevents.click.addRow = (source) => {\r\n    if (mainTable.rows >= 30) {\r\n        UI.alert(\"Tables this large can be difficult to read. Consider using multiple tables instead.\");\r\n    }\r\n\r\n    let index = (source.dataset.row ?? null);\r\n\r\n    index = (index != null) ? parseInt(index) + 1 : null;\r\n\r\n    mainTable.addRow(index);\r\n\r\n    mainTable.updateInterface([\"Body\"]);\r\n};\r\n\r\nevents.click.removeColumn = (source) => {\r\n    if (mainTable.columns === 1) {\r\n        return UI.warning(\"You must have at least 1 column.\");\r\n    }\r\n\r\n    mainTable.removeColumn(source.dataset.column);\r\n    mainTable.updateInterface([\"Header\", \"Body\"]);\r\n\r\n};\r\n\r\nevents.click.removeRow = (source) => {\r\n    if (mainTable.rows === 1) {\r\n        return UI.warning(\"You must have at least 1 row.\");\r\n    }\r\n    mainTable.removeRow(source.dataset.row);\r\n    mainTable.updateInterface([\"Body\"]);\r\n};\r\n\r\n\r\n\r\nevents.keyup.syncColumns = (source) => {\r\n    let targetCols = source.value ?? 1,\r\n        currentCols = mainTable.columns,\r\n        i = 0, cols = 0;\r\n\r\n    if (targetCols == currentCols) return false;\r\n\r\n    if (targetCols > currentCols) {\r\n        i = currentCols;\r\n        for (i; i < targetCols; i++) {\r\n            mainTable.addColumn();\r\n        }\r\n    }\r\n\r\n    if (targetCols < currentCols) {\r\n        i = currentCols;\r\n        for (i; i > targetCols; i--) {\r\n            mainTable.removeColumn();\r\n        }\r\n    }\r\n\r\n    console.log(\"Columns Synced\");\r\n};\r\n\r\nevents.keyup.syncRows = (source) => {\r\n    let targetRows = source.value ?? 1,\r\n        currentRows = mainTable.rows,\r\n        i = 0, Rows = 0;\r\n\r\n    if (targetRows == currentRows) return false;\r\n\r\n    if (targetRows > currentRows) {\r\n        i = currentRows;\r\n        for (i; i < targetRows; i++) {\r\n            mainTable.addRow();\r\n        }\r\n    }\r\n\r\n    if (targetRows < currentRows) {\r\n        i = currentRows;\r\n        for (i; i > targetRows; i--) {\r\n            mainTable.removeRow();\r\n        }\r\n    }\r\n\r\n    console.log(\"Rows Synced\");\r\n};\r\n\r\nevents.change.syncColumns = (source) => {\r\n    events.keyup.syncColumns(source);\r\n};\r\n\r\nevents.change.syncRows = events.keyup.syncRows;\r\n\r\nevents.click.insertIntoEditor = (source) => {\r\n\r\n};\r\n\r\nevents.change.syncHeading = (source) => {\r\n\r\n    let location = source.dataset.location.split(\",\");\r\n    mainTable.updateTableHead(location[1], source.value);\r\n    mainTable.updateInterface([\"Header\"]);\r\n}\r\n\r\nevents.change.syncValue = (source) => {\r\n    let location = source.dataset.location.split(\",\");\r\n    mainTable.updateTableBody(location[0], location[1], source.value);\r\n    // No need to update interface, these are already IN the interface. \r\n}\r\n\r\nevents.keyup.syncCaption = (source) => {\r\n    mainTable.caption = source.value;\r\n    mainTable.updateInterface([\"Caption\"]);\r\n}\r\n\r\nevents.click.getHtmlCode = () => {\r\n    let output = `<textarea class='embed'>${mainTable.htmlOutput}</textarea>`;\r\n    UI.modal(output);\r\n};\r\n\r\nevents.click.previewTable = () => {\r\n    UI.modal(mainTable.htmlOutput);\r\n};\r\n\r\nevents.keyup.syncDefaultValue = (source) => {\r\n    mainTable.defaultNewValue = source.value;\r\n};\r\n\r\nevents.click.toggleFor = (source) => {\r\n\r\n    let target = source.dataset.for ?? \"body\";\r\n\r\n    target = document.querySelector(target);\r\n\r\n    if (!target instanceof HTMLElement) return false;\r\n\r\n    target.classList.toggle(\"hidden\");\r\n\r\n};","/**\r\n * Class representing a performance benchmark.\r\n */\r\nexport class Benchmark {\r\n    constructor(name) {\r\n        this.name = name;\r\n        this.start = performance.now();\r\n        this.result = 0;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @returns a completed benchmark\r\n     */\r\n    stop() {\r\n        this.result = performance.now() - this.start;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * verbose benchmark output\r\n     */\r\n    get detailedResults() {\r\n        return `Task \"${this.name}\" executed in ${this.result} ms.`;\r\n    }\r\n}","import { events } from './helper_events.js';\r\n\r\nimport { SimpleTable } from \"./class_SimpleTable.js\";\r\n\r\nexport const mainTable = new SimpleTable(\"MainTable\");\r\n\r\n/**\r\n * Here we add event listeners and setup the app. \r\n */\r\ndocument.body.addEventListener(\"keyup\", (e) => {\r\n\r\n    let source = e.target;\r\n\r\n    events.keyup[source.dataset.keyup]?.(source, e);\r\n});\r\n\r\ndocument.body.addEventListener(\"change\", (e) => {\r\n\r\n    let source = e.target;\r\n\r\n    events.change[source.dataset.change]?.(source, e);\r\n});\r\n\r\ndocument.body.addEventListener(\"click\", (e) => {\r\n\r\n    let source = e.target;\r\n\r\n    events.click[source.dataset.click]?.(source, e);\r\n});\r\n\r\ndocument.body.onload = () => {\r\n\r\n    mainTable.updateInterface();\r\n};\r\n\r\n/**\r\n * This allows the script to work in gadget or app mode without\r\n * recompiling. The gadget requires jQuery but our app does not\r\n * and we don't want to waste resources importing modules we don't need. \r\n * The gadget.html file sets this property so it's only true for the gadget.\r\n */\r\nif (window.isGadget === true) {\r\n    import(\"./setup_gadget.js\").then((module) => {\r\n\r\n        const setupGadget = module.default;\r\n        \r\n        if (document.readyState != 'loading') {\r\n            setupGadget();\r\n        } else {\r\n            document.addEventListener('DOMContentLoaded', setupGadget);\r\n        }\r\n    });\r\n}\r\n","import mustache from './libs/mustache.js';\r\n\r\nimport { UI } from './helper_ui.js';\r\n\r\nimport { Benchmark } from \"./class_Benchmark.js\";\r\n\r\n/**\r\n * Class representing an HTML table\r\n */\r\nexport class SimpleTable {\r\n    constructor(tableId) {\r\n        this.tableId = tableId;\r\n        this.caption = \"Table Caption\";\r\n        this.tableHeading = [\"Heading\"];\r\n        this.tableBody = [[\"Value\"]];\r\n        this.defaultNewValue = \"New Value\";\r\n        this.templates = {};\r\n    }\r\n\r\n    get isValid() {\r\n        if (this.caption.length <= 0) {\r\n            this.validationError = \"The caption cannot be blank.\";\r\n            return false;\r\n        }\r\n        if (this.tableHeading.length < 1) {\r\n            this.validationError = \"The table must have a header row.\";\r\n            return false;\r\n        }\r\n        if (this.tableBody.length < 1) {\r\n            this.validationError = \"The table most have content.\";\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    get element() {\r\n        return document.getElementById(this.tableId);\r\n    }\r\n\r\n    get columns() {\r\n        return this.tableHeading.length;\r\n    }\r\n\r\n    get rows() {\r\n        return this.tableBody.length;\r\n    }\r\n\r\n    get tdTemplate() {\r\n        if (this.templates.td) return this.templates.td;\r\n        let query = `.td[data-template-for=\"${this.tableId}\"]`;\r\n        let template = document.querySelector(query)?.innerHTML;\r\n        this.templates.td = template;\r\n        return template;\r\n    }\r\n\r\n    get thTemplate() {\r\n        if (this.templates.th) return this.templates.th;\r\n        let query = `.th[data-template-for=\"${this.tableId}\"]`;\r\n        let template = document.querySelector(query)?.innerHTML;\r\n        this.templates.th = template;\r\n        return template;\r\n    }\r\n\r\n    get rowTemplate() {\r\n        if (this.templates.row) return this.templates.row;\r\n        let query = `.row[data-template-for=\"${this.tableId}\"]`;\r\n        let template = document.querySelector(query)?.innerHTML;\r\n        this.templates.row = template;\r\n        return template;\r\n    }\r\n\r\n    /**\r\n     * Scans input HTML for a table and attempts to transform it into a compatible format\r\n     * while keeping the data intact. \r\n     * @param {string} html \r\n     * @returns the success (true/false) of the import. \r\n     */\r\n    import(html) {\r\n        // Add a temporary element to the actual page to query/manipulate\r\n        let workshop = document.createElement(\"div\");\r\n        document.body.appendChild(workshop);\r\n        workshop.style.visibility = \"hidden\";\r\n        workshop.innerHTML = html;\r\n\r\n        // Check the input HTML for a table with content inside. \r\n        let check = workshop.querySelector(\"table\")?.children?.length ?? 0;\r\n\r\n        // The table is empty or malformed, abort mission and return false. \r\n        if (check <= 0) return false;\r\n\r\n        // Get the caption text\r\n        let caption = workshop.querySelector(\"caption\")?.textContent ?? \"No Caption\";\r\n\r\n        // Get an array of the text content from the th tags to use as a header row. \r\n        // This works for vertical header columns but the output will be pivoted. \r\n        let headRow = Array.from(workshop.querySelectorAll(\"th\")).map((item) => {\r\n            return item.textContent;\r\n        });\r\n\r\n        // The maximum number of columns allowed (row with most TD's determins this)\r\n        let colMax = 0;\r\n\r\n        // Convert TRs to an array\r\n        let bodyRows = Array.from(workshop.querySelectorAll(\"tr\")).map((rowItem, rowIndex) => {\r\n\r\n            // Add another array of TD's for each TR, this matches how we store the table in the class. \r\n            let rowData = Array.from(rowItem.querySelectorAll(\"td\"));\r\n\r\n            let newRow = rowData.map((td) => {\r\n                return td.textContent;\r\n            });\r\n\r\n            // Assure all rows have the same number of columns.\r\n            colMax = (colMax < newRow.length) ? newRow.length : colMax;\r\n\r\n            return newRow;\r\n        }).filter((row) => {\r\n            // This filteres out rows with no TD tags (usually the header row). \r\n            if (row.length > 0) return true;\r\n            return false;\r\n        });\r\n\r\n        {\r\n            // Synchronize the # of Columns between Header & Footer\r\n            colMax = (colMax < headRow.length) ? headRow.length : colMax;\r\n\r\n            bodyRows.forEach((row) => {\r\n                let diff = colMax - row.length;\r\n                let i = 0;\r\n                for (i; i < diff; i++) {\r\n                    row.push(this.defaultNewValue);\r\n                }\r\n            });\r\n\r\n            if (headRow.length < colMax) {\r\n                let diff = colMax - headRow.length;\r\n                let i = 0;\r\n                for (i; i < diff; i++) {\r\n                    headRow.push(\"Heading\");\r\n                }\r\n            }\r\n        }\r\n        {\r\n            // Cleanup DOM\r\n            workshop.parentElement.removeChild(workshop);\r\n        }\r\n        {\r\n            // Update actual data\r\n            this.caption = caption;\r\n            this.tableHeading = headRow;\r\n            this.tableBody = bodyRows;\r\n        }\r\n\r\n        // If we made it this far, success. Return true to let the calling method know. \r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Resets the entire table to the default values. \r\n     */\r\n    fullReset() {\r\n        this.caption = \"Table Caption\";\r\n        this.tableHeading = [\"Heading\"];\r\n        this.tableBody = [[\"Value\"]];\r\n        this.defaultNewValue = \"New Value\";\r\n        this.updateInterface();\r\n    }\r\n\r\n    addColumn(insertIndex) {\r\n\r\n        insertIndex = insertIndex ?? this.tableHeading.length;\r\n\r\n        this.tableHeading.splice(insertIndex, 0, \"New Heading\");\r\n\r\n        this.tableBody.forEach((item, index) => {\r\n            // item.push(this.defaultNewValue);\r\n            item.splice(insertIndex, 0, this.defaultNewValue)\r\n        });\r\n    }\r\n\r\n    addRow(insertIndex) {\r\n        insertIndex = insertIndex ?? this.tableBody.length;\r\n\r\n        let newRow = [];\r\n\r\n        this.tableHeading.forEach((item, idex) => {\r\n            newRow.push(this.defaultNewValue);\r\n        });\r\n\r\n        this.tableBody.splice(insertIndex, 0, newRow);\r\n    }\r\n\r\n    removeColumn(index) {\r\n        this.tableHeading.splice(index, 1);\r\n        this.tableBody.forEach((item, i) => {\r\n            item.splice(index, 1);\r\n        });\r\n    }\r\n\r\n    removeRow(index) {\r\n        this.tableBody.splice(index, 1);\r\n    }\r\n\r\n    /**\r\n     * The raw HTML output of the table.\r\n     */\r\n    get htmlOutput() {\r\n        let headerHtml = this.tableHeading.map(value => `\\n           <th>${value}</th>`).join(' ');\r\n        let bodyHtml = \"\";\r\n        this.tableBody.forEach((item) => {\r\n            bodyHtml += (\"\\n      <tr>\" + item.map(value => `\\n         <td>${value}</td>`).join(' ') + \"\\n     </tr>\");\r\n        });\r\n\r\n        let outHtml = ` \r\n<table>\r\n    <caption>${this.caption}</caption>\r\n    <thead>\r\n        <tr>${headerHtml}\r\n        </tr>\r\n    </thead>\r\n    <tbody>${bodyHtml}\r\n    </tbody>\r\n</table>`;\r\n\r\n        return outHtml;\r\n    }\r\n\r\n    /**\r\n     * WARNING: _functions are private & may yield unexpected results. \r\n     * @returns the number of the cell given a row/column combination\r\n     */\r\n    _calcNumber(row, col) {\r\n\r\n        let max = this.columns * row;\r\n\r\n        let num = (col + max) + 1;\r\n\r\n        let out = num < 10 ? `0${num}` : `${num}`;\r\n\r\n        return num;\r\n    }\r\n    /**\r\n     * WARNING: _functions are private & may yield unexpected results.  \r\n     * Updates the UI, synchronizing the caption. \r\n     */\r\n    _uiCaption() {\r\n        this.element.querySelector(\"caption\").textContent = this.caption;\r\n    }\r\n\r\n    /**\r\n     * WARNING: _functions are private & may yield unexpected results.  \r\n     * Updates the UI, synchronizing the header row. \r\n     */\r\n    _uiHeader() {\r\n        let num = this._calcNumber.bind(this);\r\n\r\n        let headerHtml = this.tableHeading.map((item, index) => {\r\n\r\n            let context = {\r\n                column: index,\r\n                number: num(0, index),\r\n                row: 0, value: item,\r\n                type: \"Heading\", first: index === 0\r\n            };\r\n\r\n            return mustache.render(this.thTemplate, context);\r\n\r\n        }).join(\"\");\r\n\r\n        this.element.querySelector(\"thead\").innerHTML = headerHtml;\r\n    }\r\n\r\n    /**\r\n     * WARNING: _functions are not \"public\" & may yeild unexpected results.  \r\n     * Updates the UI, synchronizing the table body. \r\n     */\r\n    _uiBody() {\r\n        let bodyHtml = \"\";\r\n        let columnCount = this.columns;\r\n        let num = this._calcNumber.bind(this);\r\n\r\n        this.tableBody.forEach((rowItem, rowIndex) => {\r\n\r\n\r\n            let context = {\r\n                rowContent: rowItem.map((item, index) => {\r\n                    let context = {\r\n                        column: index,\r\n                        row: rowIndex,\r\n                        number: num(rowIndex, index),\r\n                        value: item, type: \"Value\"\r\n                    };\r\n                    context.first = index == 0 ? true : false;\r\n                    return mustache.render(this.tdTemplate, context);\r\n                }).join(\"\"),\r\n                row: rowIndex,\r\n                nextRow: rowIndex + 1,\r\n                columns: columnCount\r\n            };\r\n\r\n\r\n\r\n            bodyHtml += mustache.render(this.rowTemplate, context);\r\n        });\r\n\r\n        this.element.querySelector(\"tbody\").innerHTML = bodyHtml;\r\n    }\r\n\r\n    /**\r\n     * Updates the UI, synchronizing the specified sections. \r\n     * @param {array} section - Array of target sections, \r\n     * valid sections include \"Caption\", \"Header\" and \"Body\"\r\n     */\r\n    updateInterface(section) {\r\n        let bench = new Benchmark(\"Update UI\");\r\n\r\n        section = section ?? [\"Caption\", \"Header\", \"Body\"];\r\n\r\n        let i = 0, len = section.length;\r\n\r\n        for (i; i < len; i++) {\r\n            let target = `_ui${section?.[i]}`;\r\n            let method = this?.[target];\r\n            method.bind(this).call();\r\n        }\r\n\r\n        console.log(bench.stop().detailedResults);\r\n        if (bench.result > 50) {\r\n            UI.alert(\"The performance of this application is lower than normal. This table may be too large.\");\r\n        }\r\n\r\n    }\r\n\r\n    updateTableHead(index, value) {\r\n        if (this.tableHeading?.[index]) {\r\n            this.tableHeading[index] = value;\r\n        }\r\n    }\r\n\r\n    updateTableBody(row, column, value) {\r\n        if (this.tableBody?.[row]?.[column]) {\r\n            this.tableBody[row][column] = value;\r\n        }\r\n    }\r\n\r\n}"],"names":["$caf7be09e81127c6$export$6503ec6e8aabbaf","$caf7be09e81127c6$export$f7ad0328861e2f03","$caf7be09e81127c6$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","module","exports","import","parcelRequire","resolve","then","register","JSON","parse","$1fd3cf67179889c6$var$objectToString","prototype","toString","Array","isArray","object","call","$1fd3cf67179889c6$var$isFunction","$1fd3cf67179889c6$var$escapeRegExp","string","replace","$1fd3cf67179889c6$var$hasProperty","obj","propName","$1fd3cf67179889c6$var$regExpTest","RegExp","test","$1fd3cf67179889c6$var$nonSpaceRe","$1fd3cf67179889c6$var$isWhitespace","re","$1fd3cf67179889c6$var$testRegExp","$1fd3cf67179889c6$var$whiteRe","$1fd3cf67179889c6$var$spaceRe","$1fd3cf67179889c6$var$equalsRe","$1fd3cf67179889c6$var$curlyRe","$1fd3cf67179889c6$var$tagRe","$1fd3cf67179889c6$var$Scanner","$1fd3cf67179889c6$var$Context","view","parentContext","this","cache","parent","$1fd3cf67179889c6$var$Writer","templateCache","_cache","set","key","value","get","eos","scan","tail","match","index","substring","scanUntil","search","pos","push","lookup","name","primitive","hasOwnProperty","intermediateValue","names","context","lookupHit","indexOf","split","clearCache","clear","template","tags","cacheKey","$1fd3cf67179889c6$var$mustache","join","isCacheEnabled","tokens","undefined","closingTagRe","closingCurlyRe","stripSpace","hasTag","nonSpace","spaces","pop","compileTags","tagsToCompile","$1fd3cf67179889c6$var$isArray","openingTagRe","start","type","chr","token","openSection","scanner","valueLength","charAt","indentation","lineHasNonSpace","tagIndex","sections","nestedTokens","numTokens","collector","lastToken","squashedTokens","$1fd3cf67179889c6$var$squashTokens","$1fd3cf67179889c6$var$parseTemplate","String","s","$1fd3cf67179889c6$var$entityMap","$38d663c6e0ab928c$export$4b08aed5f1ec6952","innerHTML","source","textContent","selector","html","document","querySelector","$1fd3cf67179889c6$export$2e2bcd8739ae039","render","target","data","add","$38d663c6e0ab928c$var$closeModal","ref","getElementById","remove","modal","content","$1e59a0f5143b7ff3$export$4bf9923669ad6c63","click","closeModal","wrapper","createElement","dataset","body","appendChild","alert","message","warning","confirm","ifYes","ifNo","confirmYes","confirmNo","textInput","callback","processTextInput","e","text","change","keyup","actions","$1e59a0f5143b7ff3$var$triggerEvent","element","eventData","detail","event","CustomEvent","dispatchEvent","addToPage","console","log","$86fddb25301e9136$export$201e67f328c15331","isValid","validationError","htmlOutput","importHtml","updateInterface","action","_actions","resetTable","fullReset","addColumn","_column","columns","column","parseInt","addRow","_row","rows","row","removeColumn","removeRow","syncColumns","_value","targetCols","currentCols","syncRows","targetRows","currentRows","insertIntoEditor","syncHeading","location","updateTableHead","syncValue","updateTableBody","syncCaption","caption","getHtmlCode","output","previewTable","syncDefaultValue","defaultNewValue","toggleFor","_for","for","HTMLElement","classList","toggle","$199600ec6ea92f06$export$a7cd069e891db03b","stop","result","performance","now","detailedResults","tableHeading","tableBody","tableId","tdTemplate","templates","td","query","thTemplate","th","rowTemplate","ref1","ref2","workshop","ref3","style","visibility","children","ref4","headRow","from","querySelectorAll","map","item","colMax","bodyRows","rowItem","rowIndex","newRow","filter","forEach","diff","parentElement","removeChild","insertIndex","splice","idex","bodyHtml","headerHtml","col","_uiCaption","_uiHeader","num","_calcNumber","bind","columnCount","context1","rowContent","number","first","nextRow","section","bench","len","addEventListener","_keyup","_change","_click","onload"],"version":3,"file":"index.44a8a3cd.js.map"}