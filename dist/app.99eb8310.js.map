{"mappings":"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","sources":["./scripts/libs/mustache.js","./scripts/helper_ui.js","./scripts/helper_events.js","./scripts/class_Benchmark.js","./scripts/app.js","./scripts/class_SimpleTable.js"],"sourcesContent":["/*!\r\n * mustache.js - Logic-less {{mustache}} templates with JavaScript\r\n * http://github.com/janl/mustache.js\r\n */\r\n\r\nvar objectToString = Object.prototype.toString;\r\nvar isArray = Array.isArray || function isArrayPolyfill (object) {\r\n  return objectToString.call(object) === '[object Array]';\r\n};\r\n\r\nfunction isFunction (object) {\r\n  return typeof object === 'function';\r\n}\r\n\r\n/**\r\n * More correct typeof string handling array\r\n * which normally returns typeof 'object'\r\n */\r\nfunction typeStr (obj) {\r\n  return isArray(obj) ? 'array' : typeof obj;\r\n}\r\n\r\nfunction escapeRegExp (string) {\r\n  return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\r\n}\r\n\r\n/**\r\n * Null safe way of checking whether or not an object,\r\n * including its prototype, has a given property\r\n */\r\nfunction hasProperty (obj, propName) {\r\n  return obj != null && typeof obj === 'object' && (propName in obj);\r\n}\r\n\r\n/**\r\n * Safe way of detecting whether or not the given thing is a primitive and\r\n * whether it has the given property\r\n */\r\nfunction primitiveHasOwnProperty (primitive, propName) {\r\n  return (\r\n    primitive != null\r\n    && typeof primitive !== 'object'\r\n    && primitive.hasOwnProperty\r\n    && primitive.hasOwnProperty(propName)\r\n  );\r\n}\r\n\r\n// Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\r\n// See https://github.com/janl/mustache.js/issues/189\r\nvar regExpTest = RegExp.prototype.test;\r\nfunction testRegExp (re, string) {\r\n  return regExpTest.call(re, string);\r\n}\r\n\r\nvar nonSpaceRe = /\\S/;\r\nfunction isWhitespace (string) {\r\n  return !testRegExp(nonSpaceRe, string);\r\n}\r\n\r\nvar entityMap = {\r\n  '&': '&amp;',\r\n  '<': '&lt;',\r\n  '>': '&gt;',\r\n  '\"': '&quot;',\r\n  \"'\": '&#39;',\r\n  '/': '&#x2F;',\r\n  '`': '&#x60;',\r\n  '=': '&#x3D;'\r\n};\r\n\r\nfunction escapeHtml (string) {\r\n  return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap (s) {\r\n    return entityMap[s];\r\n  });\r\n}\r\n\r\nvar whiteRe = /\\s*/;\r\nvar spaceRe = /\\s+/;\r\nvar equalsRe = /\\s*=/;\r\nvar curlyRe = /\\s*\\}/;\r\nvar tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\r\n\r\n/**\r\n * Breaks up the given `template` string into a tree of tokens. If the `tags`\r\n * argument is given here it must be an array with two string values: the\r\n * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\r\n * course, the default is to use mustaches (i.e. mustache.tags).\r\n *\r\n * A token is an array with at least 4 elements. The first element is the\r\n * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\r\n * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\r\n * all text that appears outside a symbol this element is \"text\".\r\n *\r\n * The second element of a token is its \"value\". For mustache tags this is\r\n * whatever else was inside the tag besides the opening symbol. For text tokens\r\n * this is the text itself.\r\n *\r\n * The third and fourth elements of the token are the start and end indices,\r\n * respectively, of the token in the original template.\r\n *\r\n * Tokens that are the root node of a subtree contain two more elements: 1) an\r\n * array of tokens in the subtree and 2) the index in the original template at\r\n * which the closing tag for that section begins.\r\n *\r\n * Tokens for partials also contain two more elements: 1) a string value of\r\n * indendation prior to that tag and 2) the index of that tag on that line -\r\n * eg a value of 2 indicates the partial is the third tag on this line.\r\n */\r\nfunction parseTemplate (template, tags) {\r\n  if (!template)\r\n    return [];\r\n  var lineHasNonSpace = false;\r\n  var sections = [];     // Stack to hold section tokens\r\n  var tokens = [];       // Buffer to hold the tokens\r\n  var spaces = [];       // Indices of whitespace tokens on the current line\r\n  var hasTag = false;    // Is there a {{tag}} on the current line?\r\n  var nonSpace = false;  // Is there a non-space char on the current line?\r\n  var indentation = '';  // Tracks indentation for tags that use it\r\n  var tagIndex = 0;      // Stores a count of number of tags encountered on a line\r\n\r\n  // Strips all whitespace tokens array for the current line\r\n  // if there was a {{#tag}} on it and otherwise only space.\r\n  function stripSpace () {\r\n    if (hasTag && !nonSpace) {\r\n      while (spaces.length)\r\n        delete tokens[spaces.pop()];\r\n    } else {\r\n      spaces = [];\r\n    }\r\n\r\n    hasTag = false;\r\n    nonSpace = false;\r\n  }\r\n\r\n  var openingTagRe, closingTagRe, closingCurlyRe;\r\n  function compileTags (tagsToCompile) {\r\n    if (typeof tagsToCompile === 'string')\r\n      tagsToCompile = tagsToCompile.split(spaceRe, 2);\r\n\r\n    if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)\r\n      throw new Error('Invalid tags: ' + tagsToCompile);\r\n\r\n    openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\r\n    closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\r\n    closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\r\n  }\r\n\r\n  compileTags(tags || mustache.tags);\r\n\r\n  var scanner = new Scanner(template);\r\n\r\n  var start, type, value, chr, token, openSection;\r\n  while (!scanner.eos()) {\r\n    start = scanner.pos;\r\n\r\n    // Match any text between tags.\r\n    value = scanner.scanUntil(openingTagRe);\r\n\r\n    if (value) {\r\n      for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\r\n        chr = value.charAt(i);\r\n\r\n        if (isWhitespace(chr)) {\r\n          spaces.push(tokens.length);\r\n          indentation += chr;\r\n        } else {\r\n          nonSpace = true;\r\n          lineHasNonSpace = true;\r\n          indentation += ' ';\r\n        }\r\n\r\n        tokens.push([ 'text', chr, start, start + 1 ]);\r\n        start += 1;\r\n\r\n        // Check for whitespace on the current line.\r\n        if (chr === '\\n') {\r\n          stripSpace();\r\n          indentation = '';\r\n          tagIndex = 0;\r\n          lineHasNonSpace = false;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Match the opening tag.\r\n    if (!scanner.scan(openingTagRe))\r\n      break;\r\n\r\n    hasTag = true;\r\n\r\n    // Get the tag type.\r\n    type = scanner.scan(tagRe) || 'name';\r\n    scanner.scan(whiteRe);\r\n\r\n    // Get the tag value.\r\n    if (type === '=') {\r\n      value = scanner.scanUntil(equalsRe);\r\n      scanner.scan(equalsRe);\r\n      scanner.scanUntil(closingTagRe);\r\n    } else if (type === '{') {\r\n      value = scanner.scanUntil(closingCurlyRe);\r\n      scanner.scan(curlyRe);\r\n      scanner.scanUntil(closingTagRe);\r\n      type = '&';\r\n    } else {\r\n      value = scanner.scanUntil(closingTagRe);\r\n    }\r\n\r\n    // Match the closing tag.\r\n    if (!scanner.scan(closingTagRe))\r\n      throw new Error('Unclosed tag at ' + scanner.pos);\r\n\r\n    if (type == '>') {\r\n      token = [ type, value, start, scanner.pos, indentation, tagIndex, lineHasNonSpace ];\r\n    } else {\r\n      token = [ type, value, start, scanner.pos ];\r\n    }\r\n    tagIndex++;\r\n    tokens.push(token);\r\n\r\n    if (type === '#' || type === '^') {\r\n      sections.push(token);\r\n    } else if (type === '/') {\r\n      // Check section nesting.\r\n      openSection = sections.pop();\r\n\r\n      if (!openSection)\r\n        throw new Error('Unopened section \"' + value + '\" at ' + start);\r\n\r\n      if (openSection[1] !== value)\r\n        throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\r\n    } else if (type === 'name' || type === '{' || type === '&') {\r\n      nonSpace = true;\r\n    } else if (type === '=') {\r\n      // Set the tags for the next time around.\r\n      compileTags(value);\r\n    }\r\n  }\r\n\r\n  stripSpace();\r\n\r\n  // Make sure there are no open sections when we're done.\r\n  openSection = sections.pop();\r\n\r\n  if (openSection)\r\n    throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\r\n\r\n  return nestTokens(squashTokens(tokens));\r\n}\r\n\r\n/**\r\n * Combines the values of consecutive text tokens in the given `tokens` array\r\n * to a single token.\r\n */\r\nfunction squashTokens (tokens) {\r\n  var squashedTokens = [];\r\n\r\n  var token, lastToken;\r\n  for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\r\n    token = tokens[i];\r\n\r\n    if (token) {\r\n      if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\r\n        lastToken[1] += token[1];\r\n        lastToken[3] = token[3];\r\n      } else {\r\n        squashedTokens.push(token);\r\n        lastToken = token;\r\n      }\r\n    }\r\n  }\r\n\r\n  return squashedTokens;\r\n}\r\n\r\n/**\r\n * Forms the given array of `tokens` into a nested tree structure where\r\n * tokens that represent a section have two additional items: 1) an array of\r\n * all tokens that appear in that section and 2) the index in the original\r\n * template that represents the end of that section.\r\n */\r\nfunction nestTokens (tokens) {\r\n  var nestedTokens = [];\r\n  var collector = nestedTokens;\r\n  var sections = [];\r\n\r\n  var token, section;\r\n  for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\r\n    token = tokens[i];\r\n\r\n    switch (token[0]) {\r\n      case '#':\r\n      case '^':\r\n        collector.push(token);\r\n        sections.push(token);\r\n        collector = token[4] = [];\r\n        break;\r\n      case '/':\r\n        section = sections.pop();\r\n        section[5] = token[2];\r\n        collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\r\n        break;\r\n      default:\r\n        collector.push(token);\r\n    }\r\n  }\r\n\r\n  return nestedTokens;\r\n}\r\n\r\n/**\r\n * A simple string scanner that is used by the template parser to find\r\n * tokens in template strings.\r\n */\r\nfunction Scanner (string) {\r\n  this.string = string;\r\n  this.tail = string;\r\n  this.pos = 0;\r\n}\r\n\r\n/**\r\n * Returns `true` if the tail is empty (end of string).\r\n */\r\nScanner.prototype.eos = function eos () {\r\n  return this.tail === '';\r\n};\r\n\r\n/**\r\n * Tries to match the given regular expression at the current position.\r\n * Returns the matched text if it can match, the empty string otherwise.\r\n */\r\nScanner.prototype.scan = function scan (re) {\r\n  var match = this.tail.match(re);\r\n\r\n  if (!match || match.index !== 0)\r\n    return '';\r\n\r\n  var string = match[0];\r\n\r\n  this.tail = this.tail.substring(string.length);\r\n  this.pos += string.length;\r\n\r\n  return string;\r\n};\r\n\r\n/**\r\n * Skips all text until the given regular expression can be matched. Returns\r\n * the skipped string, which is the entire tail if no match can be made.\r\n */\r\nScanner.prototype.scanUntil = function scanUntil (re) {\r\n  var index = this.tail.search(re), match;\r\n\r\n  switch (index) {\r\n    case -1:\r\n      match = this.tail;\r\n      this.tail = '';\r\n      break;\r\n    case 0:\r\n      match = '';\r\n      break;\r\n    default:\r\n      match = this.tail.substring(0, index);\r\n      this.tail = this.tail.substring(index);\r\n  }\r\n\r\n  this.pos += match.length;\r\n\r\n  return match;\r\n};\r\n\r\n/**\r\n * Represents a rendering context by wrapping a view object and\r\n * maintaining a reference to the parent context.\r\n */\r\nfunction Context (view, parentContext) {\r\n  this.view = view;\r\n  this.cache = { '.': this.view };\r\n  this.parent = parentContext;\r\n}\r\n\r\n/**\r\n * Creates a new context using the given view with this context\r\n * as the parent.\r\n */\r\nContext.prototype.push = function push (view) {\r\n  return new Context(view, this);\r\n};\r\n\r\n/**\r\n * Returns the value of the given name in this context, traversing\r\n * up the context hierarchy if the value is absent in this context's view.\r\n */\r\nContext.prototype.lookup = function lookup (name) {\r\n  var cache = this.cache;\r\n\r\n  var value;\r\n  if (cache.hasOwnProperty(name)) {\r\n    value = cache[name];\r\n  } else {\r\n    var context = this, intermediateValue, names, index, lookupHit = false;\r\n\r\n    while (context) {\r\n      if (name.indexOf('.') > 0) {\r\n        intermediateValue = context.view;\r\n        names = name.split('.');\r\n        index = 0;\r\n\r\n        /**\r\n         * Using the dot notion path in `name`, we descend through the\r\n         * nested objects.\r\n         *\r\n         * To be certain that the lookup has been successful, we have to\r\n         * check if the last object in the path actually has the property\r\n         * we are looking for. We store the result in `lookupHit`.\r\n         *\r\n         * This is specially necessary for when the value has been set to\r\n         * `undefined` and we want to avoid looking up parent contexts.\r\n         *\r\n         * In the case where dot notation is used, we consider the lookup\r\n         * to be successful even if the last \"object\" in the path is\r\n         * not actually an object but a primitive (e.g., a string, or an\r\n         * integer), because it is sometimes useful to access a property\r\n         * of an autoboxed primitive, such as the length of a string.\r\n         **/\r\n        while (intermediateValue != null && index < names.length) {\r\n          if (index === names.length - 1)\r\n            lookupHit = (\r\n              hasProperty(intermediateValue, names[index])\r\n              || primitiveHasOwnProperty(intermediateValue, names[index])\r\n            );\r\n\r\n          intermediateValue = intermediateValue[names[index++]];\r\n        }\r\n      } else {\r\n        intermediateValue = context.view[name];\r\n\r\n        /**\r\n         * Only checking against `hasProperty`, which always returns `false` if\r\n         * `context.view` is not an object. Deliberately omitting the check\r\n         * against `primitiveHasOwnProperty` if dot notation is not used.\r\n         *\r\n         * Consider this example:\r\n         * ```\r\n         * Mustache.render(\"The length of a football field is {{#length}}{{length}}{{/length}}.\", {length: \"100 yards\"})\r\n         * ```\r\n         *\r\n         * If we were to check also against `primitiveHasOwnProperty`, as we do\r\n         * in the dot notation case, then render call would return:\r\n         *\r\n         * \"The length of a football field is 9.\"\r\n         *\r\n         * rather than the expected:\r\n         *\r\n         * \"The length of a football field is 100 yards.\"\r\n         **/\r\n        lookupHit = hasProperty(context.view, name);\r\n      }\r\n\r\n      if (lookupHit) {\r\n        value = intermediateValue;\r\n        break;\r\n      }\r\n\r\n      context = context.parent;\r\n    }\r\n\r\n    cache[name] = value;\r\n  }\r\n\r\n  if (isFunction(value))\r\n    value = value.call(this.view);\r\n\r\n  return value;\r\n};\r\n\r\n/**\r\n * A Writer knows how to take a stream of tokens and render them to a\r\n * string, given a context. It also maintains a cache of templates to\r\n * avoid the need to parse the same template twice.\r\n */\r\nfunction Writer () {\r\n  this.templateCache = {\r\n    _cache: {},\r\n    set: function set (key, value) {\r\n      this._cache[key] = value;\r\n    },\r\n    get: function get (key) {\r\n      return this._cache[key];\r\n    },\r\n    clear: function clear () {\r\n      this._cache = {};\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Clears all cached templates in this writer.\r\n */\r\nWriter.prototype.clearCache = function clearCache () {\r\n  if (typeof this.templateCache !== 'undefined') {\r\n    this.templateCache.clear();\r\n  }\r\n};\r\n\r\n/**\r\n * Parses and caches the given `template` according to the given `tags` or\r\n * `mustache.tags` if `tags` is omitted,  and returns the array of tokens\r\n * that is generated from the parse.\r\n */\r\nWriter.prototype.parse = function parse (template, tags) {\r\n  var cache = this.templateCache;\r\n  var cacheKey = template + ':' + (tags || mustache.tags).join(':');\r\n  var isCacheEnabled = typeof cache !== 'undefined';\r\n  var tokens = isCacheEnabled ? cache.get(cacheKey) : undefined;\r\n\r\n  if (tokens == undefined) {\r\n    tokens = parseTemplate(template, tags);\r\n    isCacheEnabled && cache.set(cacheKey, tokens);\r\n  }\r\n  return tokens;\r\n};\r\n\r\n/**\r\n * High-level method that is used to render the given `template` with\r\n * the given `view`.\r\n *\r\n * The optional `partials` argument may be an object that contains the\r\n * names and templates of partials that are used in the template. It may\r\n * also be a function that is used to load partial templates on the fly\r\n * that takes a single argument: the name of the partial.\r\n *\r\n * If the optional `config` argument is given here, then it should be an\r\n * object with a `tags` attribute or an `escape` attribute or both.\r\n * If an array is passed, then it will be interpreted the same way as\r\n * a `tags` attribute on a `config` object.\r\n *\r\n * The `tags` attribute of a `config` object must be an array with two\r\n * string values: the opening and closing tags used in the template (e.g.\r\n * [ \"<%\", \"%>\" ]). The default is to mustache.tags.\r\n *\r\n * The `escape` attribute of a `config` object must be a function which\r\n * accepts a string as input and outputs a safely escaped string.\r\n * If an `escape` function is not provided, then an HTML-safe string\r\n * escaping function is used as the default.\r\n */\r\nWriter.prototype.render = function render (template, view, partials, config) {\r\n  var tags = this.getConfigTags(config);\r\n  var tokens = this.parse(template, tags);\r\n  var context = (view instanceof Context) ? view : new Context(view, undefined);\r\n  return this.renderTokens(tokens, context, partials, template, config);\r\n};\r\n\r\n/**\r\n * Low-level method that renders the given array of `tokens` using\r\n * the given `context` and `partials`.\r\n *\r\n * Note: The `originalTemplate` is only ever used to extract the portion\r\n * of the original template that was contained in a higher-order section.\r\n * If the template doesn't use higher-order sections, this argument may\r\n * be omitted.\r\n */\r\nWriter.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate, config) {\r\n  var buffer = '';\r\n\r\n  var token, symbol, value;\r\n  for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\r\n    value = undefined;\r\n    token = tokens[i];\r\n    symbol = token[0];\r\n\r\n    if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate, config);\r\n    else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate, config);\r\n    else if (symbol === '>') value = this.renderPartial(token, context, partials, config);\r\n    else if (symbol === '&') value = this.unescapedValue(token, context);\r\n    else if (symbol === 'name') value = this.escapedValue(token, context, config);\r\n    else if (symbol === 'text') value = this.rawValue(token);\r\n\r\n    if (value !== undefined)\r\n      buffer += value;\r\n  }\r\n\r\n  return buffer;\r\n};\r\n\r\nWriter.prototype.renderSection = function renderSection (token, context, partials, originalTemplate, config) {\r\n  var self = this;\r\n  var buffer = '';\r\n  var value = context.lookup(token[1]);\r\n\r\n  // This function is used to render an arbitrary template\r\n  // in the current context by higher-order sections.\r\n  function subRender (template) {\r\n    return self.render(template, context, partials, config);\r\n  }\r\n\r\n  if (!value) return;\r\n\r\n  if (isArray(value)) {\r\n    for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\r\n      buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate, config);\r\n    }\r\n  } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {\r\n    buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate, config);\r\n  } else if (isFunction(value)) {\r\n    if (typeof originalTemplate !== 'string')\r\n      throw new Error('Cannot use higher-order sections without the original template');\r\n\r\n    // Extract the portion of the original template that the section contains.\r\n    value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\r\n\r\n    if (value != null)\r\n      buffer += value;\r\n  } else {\r\n    buffer += this.renderTokens(token[4], context, partials, originalTemplate, config);\r\n  }\r\n  return buffer;\r\n};\r\n\r\nWriter.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate, config) {\r\n  var value = context.lookup(token[1]);\r\n\r\n  // Use JavaScript's definition of falsy. Include empty arrays.\r\n  // See https://github.com/janl/mustache.js/issues/186\r\n  if (!value || (isArray(value) && value.length === 0))\r\n    return this.renderTokens(token[4], context, partials, originalTemplate, config);\r\n};\r\n\r\nWriter.prototype.indentPartial = function indentPartial (partial, indentation, lineHasNonSpace) {\r\n  var filteredIndentation = indentation.replace(/[^ \\t]/g, '');\r\n  var partialByNl = partial.split('\\n');\r\n  for (var i = 0; i < partialByNl.length; i++) {\r\n    if (partialByNl[i].length && (i > 0 || !lineHasNonSpace)) {\r\n      partialByNl[i] = filteredIndentation + partialByNl[i];\r\n    }\r\n  }\r\n  return partialByNl.join('\\n');\r\n};\r\n\r\nWriter.prototype.renderPartial = function renderPartial (token, context, partials, config) {\r\n  if (!partials) return;\r\n  var tags = this.getConfigTags(config);\r\n\r\n  var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\r\n  if (value != null) {\r\n    var lineHasNonSpace = token[6];\r\n    var tagIndex = token[5];\r\n    var indentation = token[4];\r\n    var indentedValue = value;\r\n    if (tagIndex == 0 && indentation) {\r\n      indentedValue = this.indentPartial(value, indentation, lineHasNonSpace);\r\n    }\r\n    var tokens = this.parse(indentedValue, tags);\r\n    return this.renderTokens(tokens, context, partials, indentedValue, config);\r\n  }\r\n};\r\n\r\nWriter.prototype.unescapedValue = function unescapedValue (token, context) {\r\n  var value = context.lookup(token[1]);\r\n  if (value != null)\r\n    return value;\r\n};\r\n\r\nWriter.prototype.escapedValue = function escapedValue (token, context, config) {\r\n  var escape = this.getConfigEscape(config) || mustache.escape;\r\n  var value = context.lookup(token[1]);\r\n  if (value != null)\r\n    return (typeof value === 'number' && escape === mustache.escape) ? String(value) : escape(value);\r\n};\r\n\r\nWriter.prototype.rawValue = function rawValue (token) {\r\n  return token[1];\r\n};\r\n\r\nWriter.prototype.getConfigTags = function getConfigTags (config) {\r\n  if (isArray(config)) {\r\n    return config;\r\n  }\r\n  else if (config && typeof config === 'object') {\r\n    return config.tags;\r\n  }\r\n  else {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nWriter.prototype.getConfigEscape = function getConfigEscape (config) {\r\n  if (config && typeof config === 'object' && !isArray(config)) {\r\n    return config.escape;\r\n  }\r\n  else {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nvar mustache = {\r\n  name: 'mustache.js',\r\n  version: '4.2.0',\r\n  tags: [ '{{', '}}' ],\r\n  clearCache: undefined,\r\n  escape: undefined,\r\n  parse: undefined,\r\n  render: undefined,\r\n  Scanner: undefined,\r\n  Context: undefined,\r\n  Writer: undefined,\r\n  /**\r\n   * Allows a user to override the default caching strategy, by providing an\r\n   * object with set, get and clear methods. This can also be used to disable\r\n   * the cache by setting it to the literal `undefined`.\r\n   */\r\n  set templateCache (cache) {\r\n    defaultWriter.templateCache = cache;\r\n  },\r\n  /**\r\n   * Gets the default or overridden caching object from the default writer.\r\n   */\r\n  get templateCache () {\r\n    return defaultWriter.templateCache;\r\n  }\r\n};\r\n\r\n// All high-level mustache.* functions use this writer.\r\nvar defaultWriter = new Writer();\r\n\r\n/**\r\n * Clears all cached templates in the default writer.\r\n */\r\nmustache.clearCache = function clearCache () {\r\n  return defaultWriter.clearCache();\r\n};\r\n\r\n/**\r\n * Parses and caches the given template in the default writer and returns the\r\n * array of tokens it contains. Doing this ahead of time avoids the need to\r\n * parse templates on the fly as they are rendered.\r\n */\r\nmustache.parse = function parse (template, tags) {\r\n  return defaultWriter.parse(template, tags);\r\n};\r\n\r\n/**\r\n * Renders the `template` with the given `view`, `partials`, and `config`\r\n * using the default writer.\r\n */\r\nmustache.render = function render (template, view, partials, config) {\r\n  if (typeof template !== 'string') {\r\n    throw new TypeError('Invalid template! Template should be a \"string\" ' +\r\n                        'but \"' + typeStr(template) + '\" was given as the first ' +\r\n                        'argument for mustache#render(template, view, partials)');\r\n  }\r\n\r\n  return defaultWriter.render(template, view, partials, config);\r\n};\r\n\r\n// Export the escaping function so that the user may override it.\r\n// See https://github.com/janl/mustache.js/issues/244\r\nmustache.escape = escapeHtml;\r\n\r\n// Export these mainly for testing, but also for advanced usage.\r\nmustache.Scanner = Scanner;\r\nmustache.Context = Context;\r\nmustache.Writer = Writer;\r\n\r\nexport default mustache;","import mustache from \"./libs/mustache.js\";\r\n\r\nimport { pageContext } from \"./app.js\";\r\n\r\nimport { events } from \"./helper_events.js\";\r\n\r\nexport const UI = {};\r\n\r\nUI.get = {\r\n    innerHTML: (source) => {\r\n        return source.innerHTML;\r\n    },\r\n    textContent: (source) => {\r\n        return source.textContent;\r\n    },\r\n    value: (source) => {\r\n        return source.value;\r\n    },\r\n    template: (source) => {\r\n\r\n        let selector = `[data-for='${source.id || source.name}']`;\r\n\r\n        let html = document.querySelector(selector).innerHTML;\r\n\r\n        let rendered = mustache.render(html, pageContext);\r\n\r\n        return rendered;\r\n    }\r\n}\r\n\r\nUI.set = {\r\n    innerHTML: (target, data) => {\r\n        target.innerHTML = data;\r\n        return `target HTML is now ${data}`;\r\n    },\r\n    textContent: (target, data) => {\r\n        target.textContent = data;\r\n        return `target text is now ${data}`;\r\n    },\r\n    value: (target, data) => {\r\n        target.value = data;\r\n        return `target value is now ${data}`;\r\n    }\r\n}\r\n\r\nUI.add = {\r\n    innerHTML: (target, data) => {\r\n        target.innerHTML = target.innerHTML + data;\r\n    },\r\n    textContent: (target, data) => {\r\n        target.textContent = target.textContent + data;\r\n    },\r\n    value: (target, data) => {\r\n        target.value = target.value + data;\r\n    }\r\n}\r\n\r\nconst closeModal = () => {\r\n    document.getElementById(\"ModalWrapper\")?.remove();\r\n};\r\n\r\nUI.modal = (content) => {\r\n\r\n    events.click.closeModal = events.click.closeModal || closeModal;\r\n\r\n    let template = `<div data-click=\"closeModal\" id=\"ModalContent\">${content}</div>`;\r\n\r\n    let wrapper = document.createElement(\"div\");\r\n\r\n    wrapper.id = \"ModalWrapper\";\r\n\r\n    wrapper.dataset.click = \"closeModal\";\r\n\r\n    wrapper.innerHTML = template;\r\n\r\n    document.body.appendChild(wrapper);\r\n};\r\n\r\nUI.alert = (message) => {\r\n    let template = `<h1>Alert</h1><hr><div id=\"Alert\">${message}<hr><button data-click=\"closeModal\">Okay</button></div>`;\r\n\r\n    UI.modal(template);\r\n\r\n};\r\n\r\nUI.warning = (message) => {\r\n\r\n    let template = `<h1>Warning</h1><hr><div id=\"Warning\">${message}<hr><button data-click=\"closeModal\">Okay</button></div>`;\r\n\r\n    UI.modal(template);\r\n\r\n    return false;\r\n};\r\n\r\nUI.confirm = (message, ifYes, ifNo) => {\r\n\r\n    let template = `<h1>Confirm</h1><hr>\r\n                    <div id=\"Confirm\">${message}<hr>\r\n                    <button data-click=\"confirmYes\">Yes</button>\r\n                    <button data-click=\"confirmNo\">No</button>\r\n                    </div>`;\r\n\r\n    events.click.confirmYes = () => {\r\n        closeModal();\r\n        ifYes?.();\r\n    };\r\n\r\n    events.click.confirmNo = () => {\r\n        closeModal();\r\n        ifNo?.();\r\n    };\r\n\r\n    UI.modal(template);\r\n\r\n};\r\n\r\nUI.textInput = (callback) => {\r\n\r\n    let template = `<h2>Input Text</h2>\r\n                    <textarea id=\"TextInput\" class=\"modal-input\">Copy/Paste Here</textarea>\r\n                    <hr>\r\n                    <button data-click=\"processTextInput\">Continue</button>\r\n                    `;\r\n\r\n    events.click.processTextInput = (e) => {\r\n\r\n        let text = document.getElementById(\"TextInput\").value;\r\n\r\n        closeModal();\r\n\r\n        callback.call(e.target, text);        \r\n    };\r\n\r\n    UI.modal(template);\r\n};\r\n\r\n\r\n\r\n// Mustache\r\n\r\n// let exampleFunc =  function () {\r\n//     return function (object, render) {\r\n//         var rendered = render(object);\r\n//          return rendered;          \r\n//     };\r\n// },","import { UI } from \"./helper_ui.js\";\r\n\r\nimport { mainTable } from \"./app.js\";\r\n\r\nexport const events = {\r\n    click: {},\r\n    change: {},\r\n    keyup: {},\r\n    actions: {}\r\n};\r\n\r\nevents.click.addToPage = () => {\r\n\r\n    if(!mainTable.isValid){\r\n        UI.warning(mainTable.validationError);\r\n        return false;\r\n    }\r\n\r\n    let data = { detail: mainTable.htmlOutput };\r\n\r\n    const insertEvent = new CustomEvent(\"gadget_insert\", data);\r\n\r\n    document.body.dispatchEvent(insertEvent);\r\n};\r\n\r\nevents.actions.importHtml = (html) => {\r\n\r\n    let success = mainTable.import(html);\r\n\r\n    if(!success){\r\n        UI.warning(\"Could Not Find Table in Imported HTML\");\r\n        return false;\r\n    }\r\n    mainTable.updateInterface();\r\n};\r\n\r\nevents.click.textInput = (source) => {\r\n\r\n    let action = source.dataset.action;\r\n\r\n    UI.textInput(function (text) {\r\n        events.actions[action]?.(text);\r\n    });\r\n};\r\n\r\nevents.click.resetTable = () => {\r\n\r\n    let message = \"Are you sure you want to reset the table? All data will be lost.\";\r\n    UI.confirm(message, () => {\r\n        mainTable.fullReset();\r\n    }, null);\r\n\r\n};\r\n\r\nevents.click.addColumn = (source) => {\r\n\r\n    if (mainTable.columns >= 10) {\r\n        UI.alert(\"Having more than 10 columns is not recommended.\");\r\n    }\r\n\r\n    let index = (source.dataset.column ?? null);\r\n\r\n    index = (index != null) ? parseInt(index) + 1 : null;\r\n\r\n    mainTable.addColumn(index);\r\n\r\n    mainTable.updateInterface([\"Header\", \"Body\"]);\r\n};\r\n\r\nevents.click.addRow = (source) => {\r\n    if (mainTable.rows >= 30) {\r\n        UI.alert(\"Tables this large can be difficult to read. Consider using multiple tables instead.\");\r\n    }\r\n\r\n    let index = (source.dataset.row ?? null);\r\n\r\n    index = (index != null) ? parseInt(index) + 1 : null;\r\n\r\n    mainTable.addRow(index);\r\n\r\n    mainTable.updateInterface([\"Body\"]);\r\n};\r\n\r\nevents.click.removeColumn = (source) => {\r\n    if (mainTable.columns === 1) {\r\n        return UI.warning(\"You must have at least 1 column.\");\r\n    }\r\n\r\n    mainTable.removeColumn(source.dataset.column);\r\n    mainTable.updateInterface([\"Header\", \"Body\"]);\r\n\r\n};\r\n\r\nevents.click.removeRow = (source) => {\r\n    if (mainTable.rows === 1) {\r\n        return UI.warning(\"You must have at least 1 row.\");\r\n    }\r\n    mainTable.removeRow(source.dataset.row);\r\n    mainTable.updateInterface([\"Body\"]);\r\n};\r\n\r\nevents.change.syncHeading = (source) => {\r\n\r\n    let location = source.dataset.location.split(\",\");\r\n    mainTable.updateTableHead(location[1], source.value);\r\n    mainTable.updateInterface([\"Header\"]);\r\n}\r\n\r\nevents.change.syncValue = (source) => {\r\n    let location = source.dataset.location.split(\",\");\r\n    mainTable.updateTableBody(location[0], location[1], source.value);\r\n    // No need to update interface, these are already IN the interface. \r\n}\r\n\r\nevents.keyup.syncCaption = (source) => {\r\n    mainTable.caption = source.value;\r\n    mainTable.updateInterface([\"Caption\"]);\r\n}\r\n\r\nevents.click.getHtmlCode = () => {\r\n    let output = `<textarea class='embed'>${mainTable.htmlOutput}</textarea>`;\r\n    UI.modal(output);\r\n};\r\n\r\nevents.click.previewTable = () => {\r\n    UI.modal(mainTable.htmlOutput);\r\n};\r\n\r\nevents.keyup.syncDefaultValue = (source) => {\r\n    mainTable.defaultNewValue = source.value;\r\n};","export class Benchmark {\r\n    constructor(name) {\r\n        this.name = name;\r\n        this.start = performance.now();\r\n        this.result = 0;\r\n    }\r\n\r\n    stop() {\r\n        this.result = performance.now() - this.start;\r\n        return this;\r\n    }\r\n\r\n    get detailedResults() {\r\n        return `Task \"${this.name}\" executed in ${this.result} ms.`;\r\n    }\r\n}","import { events } from './helper_events.js';\r\n\r\nimport {SimpleTable} from \"./class_SimpleTable.js\";\r\n\r\nexport const pageContext = {};\r\n\r\nexport const mainTable = new SimpleTable(\"MainTable\");\r\n\r\nwindow._mainTable = mainTable; // Just for debugging\r\n\r\ndocument.body.addEventListener(\"keyup\", (e) => {\r\n\r\n    let source = e.target;\r\n\r\n    events.keyup[source.dataset.keyup]?.(source, e);\r\n});\r\n\r\ndocument.body.addEventListener(\"change\", (e) => {\r\n\r\n    let source = e.target;\r\n\r\n    events.change[source.dataset.change]?.(source, e);\r\n});\r\n\r\ndocument.body.addEventListener(\"click\", (e) => {\r\n\r\n    let source = e.target;\r\n\r\n    events.click[source.dataset.click]?.(source, e);\r\n});\r\n\r\ndocument.body.onload = () => {\r\n\r\n    mainTable.updateInterface();\r\n};\r\n\r\nwindow._debug = {\r\n    context: pageContext,\r\n    mainTable: mainTable,\r\n    events: events,\r\n    ou: true\r\n};","import mustache from './libs/mustache.js';\r\n\r\nimport { UI } from './helper_ui.js';\r\n\r\nimport { Benchmark } from \"./class_Benchmark.js\";\r\n\r\nexport class SimpleTable {\r\n    constructor(tableId) {\r\n        this.tableId = tableId;\r\n        this.caption = \"Table Caption\";\r\n        this.tableHeading = [\"Heading\"];\r\n        this.tableBody = [[\"Value\"]];\r\n        this.defaultNewValue = \"New Value\";\r\n        this.templates = {};\r\n    }\r\n\r\n    get isValid() {\r\n        if (this.caption.length <= 0) {\r\n            this.validationError = \"The caption cannot be blank.\";\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    get element() {\r\n        return document.getElementById(this.tableId);\r\n    }\r\n\r\n    get columns() {\r\n        return this.tableHeading.length;\r\n    }\r\n\r\n    get rows() {\r\n        return this.tableBody.length;\r\n    }\r\n\r\n    get tdTemplate() {\r\n        if (this.templates.td) return this.templates.td;\r\n        let query = `.td[data-template-for=\"${this.tableId}\"]`;\r\n        let template = document.querySelector(query)?.innerHTML;\r\n        this.templates.td = template;\r\n        return template;\r\n    }\r\n\r\n    get thTemplate() {\r\n        if (this.templates.th) return this.templates.th;\r\n        let query = `.th[data-template-for=\"${this.tableId}\"]`;\r\n        let template = document.querySelector(query)?.innerHTML;\r\n        this.templates.th = template;\r\n        return template;\r\n    }\r\n\r\n    get rowTemplate() {\r\n        if (this.templates.row) return this.templates.row;\r\n        let query = `.row[data-template-for=\"${this.tableId}\"]`;\r\n        let template = document.querySelector(query)?.innerHTML;\r\n        this.templates.row = template;\r\n        return template;\r\n    }\r\n\r\n    import(html) {\r\n        let workshop = document.createElement(\"div\");\r\n        document.body.appendChild(workshop);\r\n        workshop.style.visibility = \"hidden\";\r\n        workshop.innerHTML = html;\r\n\r\n        let check = workshop.querySelector(\"table\")?.children?.length ?? 0;\r\n        \r\n        if (check <= 0) return false;\r\n\r\n        let caption = workshop.querySelector(\"caption\")?.textContent ?? \"No Caption\";\r\n\r\n        let headRow = Array.from(workshop.querySelectorAll(\"th\")).map((item) => {\r\n            return item.textContent;\r\n        });\r\n\r\n        let colMax = 0;\r\n\r\n        let bodyRows = Array.from(workshop.querySelectorAll(\"tr\")).map((rowItem, rowIndex) => {\r\n\r\n            let rowData = Array.from(rowItem.querySelectorAll(\"td\"));\r\n\r\n            let newRow = rowData.map((td) => {\r\n                return td.textContent;\r\n            });\r\n\r\n            // Assure all rows have the same number of columns.\r\n            colMax = (colMax < newRow.length) ? newRow.length : colMax;\r\n\r\n            return newRow;\r\n        }).filter((row) => {\r\n            if (row.length > 0) return true;\r\n            return false;\r\n        });\r\n\r\n        {\r\n            // Synchronize the # of Columns between Header & Footer\r\n            colMax = (colMax < headRow.length) ? headRow.length : colMax;\r\n\r\n            bodyRows.forEach((row) => {\r\n                let diff = colMax - row.length;\r\n                let i = 0;\r\n                for (i; i < diff; i++) {\r\n                    row.push(this.defaultNewValue);\r\n                }\r\n            });\r\n\r\n            if (headRow.length < colMax) {\r\n                let diff = colMax - headRow.length;\r\n                let i = 0;\r\n                for (i; i < diff; i++) {\r\n                    headRow.push(\"Heading\");\r\n                }\r\n            }\r\n        }\r\n        {\r\n            // Cleanup DOM\r\n            workshop.parentElement.removeChild(workshop);\r\n        }\r\n        {\r\n            // Update actual data\r\n            this.caption = caption;\r\n            this.tableHeading = headRow;\r\n            this.tableBody = bodyRows;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    fullReset() {\r\n        this.caption = \"Table Caption\";\r\n        this.tableHeading = [\"Heading\"];\r\n        this.tableBody = [[\"Value\"]];\r\n        this.defaultNewValue = \"New Value\";\r\n        this.updateInterface();\r\n    }\r\n\r\n    addColumn(insertIndex) {\r\n\r\n        insertIndex = insertIndex ?? this.tableHeading.length;\r\n\r\n        this.tableHeading.splice(insertIndex, 0, \"New Heading\");\r\n\r\n        this.tableBody.forEach((item, index) => {\r\n            // item.push(this.defaultNewValue);\r\n            item.splice(insertIndex, 0, this.defaultNewValue)\r\n        });\r\n    }\r\n    addRow(insertIndex) {\r\n        insertIndex = insertIndex ?? this.tableBody.length;\r\n\r\n        let newRow = [];\r\n\r\n        this.tableHeading.forEach((item, idex) => {\r\n            newRow.push(this.defaultNewValue);\r\n        });\r\n\r\n        this.tableBody.splice(insertIndex, 0, newRow);\r\n    }\r\n\r\n    removeColumn(index) {\r\n        this.tableHeading.splice(index, 1);\r\n        this.tableBody.forEach((item, i) => {\r\n            item.splice(index, 1);\r\n        });\r\n    }\r\n\r\n    removeRow(index) {\r\n        this.tableBody.splice(index, 1);\r\n    }\r\n\r\n    get htmlOutput() {\r\n        let headerHtml = this.tableHeading.map(value => `\\n           <th>${value}</th>`).join(' ');\r\n        let bodyHtml = \"\";\r\n        this.tableBody.forEach((item) => {\r\n            bodyHtml += (\"\\n      <tr>\" + item.map(value => `\\n         <td>${value}</td>`).join(' ') + \"\\n     </tr>\");\r\n        });\r\n\r\n        let outHtml = ` \r\n<table>\r\n    <caption>${this.caption}</caption>\r\n    <thead>\r\n        <tr>${headerHtml}\r\n        </tr>\r\n    </thead>\r\n    <tbody>${bodyHtml}\r\n    </tbody>\r\n</table>`;\r\n\r\n        return outHtml;\r\n    }\r\n\r\n    _calcNumber(row, col) {\r\n\r\n        let max = this.columns * row;\r\n\r\n        return (col + max) +1;\r\n    }\r\n    /**\r\n     * WARNING: _functions are not \"public\" & may yeild unexpected results.  \r\n     */\r\n    _uiCaption() {\r\n        this.element.querySelector(\"caption\").textContent = this.caption;\r\n    }\r\n\r\n    /**\r\n     * WARNING: _functions are not \"public\" & may yeild unexpected results.  \r\n     */\r\n    _uiHeader() {\r\n        let num = this._calcNumber.bind(this);\r\n        let headerHtml = this.tableHeading.map((item, index) => {\r\n\r\n            let context = {\r\n                column: index,\r\n                number: num(0, index),\r\n                row: 0, value: item,\r\n                type: \"Heading\", first: index === 0\r\n            };\r\n\r\n            return mustache.render(this.thTemplate, context);\r\n\r\n        }).join(\"\");\r\n\r\n        this.element.querySelector(\"thead\").innerHTML = headerHtml;\r\n    }\r\n\r\n    /**\r\n     * WARNING: _functions are not \"public\" & may yeild unexpected results.  \r\n     */\r\n    _uiBody() {\r\n        let bodyHtml = \"\";\r\n        let columnCount = this.columns;\r\n        let num = this._calcNumber.bind(this);\r\n\r\n        this.tableBody.forEach((rowItem, rowIndex) => {\r\n\r\n\r\n            let context = {\r\n                rowContent: rowItem.map((item, index) => {\r\n                    let context = {\r\n                        column: index,\r\n                        row: rowIndex,\r\n                        number: num(rowIndex, index),\r\n                        value: item, type: \"Value\"\r\n                    };\r\n                    context.first = index == 0 ? true : false;\r\n                    return mustache.render(this.tdTemplate, context);\r\n                }).join(\"\"),\r\n                row: rowIndex,\r\n                nextRow: rowIndex + 1,\r\n                columns: columnCount\r\n            };\r\n\r\n\r\n\r\n            bodyHtml += mustache.render(this.rowTemplate, context);\r\n        });\r\n\r\n        this.element.querySelector(\"tbody\").innerHTML = bodyHtml;\r\n    }\r\n\r\n    updateInterface(type, location) {\r\n        let bench = new Benchmark(\"Update UI\");\r\n\r\n        type = type ?? [\"Caption\", \"Header\", \"Body\"];\r\n\r\n        let i = 0, len = type.length;\r\n\r\n        for (i; i < len; i++) {\r\n            let section = `_ui${type?.[i]}`;\r\n            let method = this?.[section];\r\n            method.bind(this).call();\r\n        }\r\n\r\n        console.log(bench.stop().detailedResults);\r\n        if (bench.result > 50) {\r\n            UI.alert(\"The performance of this application is lower than normal. This table may be too large.\");\r\n        }\r\n\r\n    }\r\n\r\n    updateTableHead(index, value) {\r\n        if (this.tableHeading?.[index]) {\r\n            this.tableHeading[index] = value;\r\n        }\r\n    }\r\n\r\n    updateTableBody(row, column, value) {\r\n        if (this.tableBody?.[row]?.[column]) {\r\n            this.tableBody[row][column] = value;\r\n        }\r\n    }\r\n\r\n}"],"names":["$7b0b40924f81206212a1117814e540fc$var$objectToString","Object","prototype","toString","$7b0b40924f81206212a1117814e540fc$var$isArray","Array","isArray","object","call","$7b0b40924f81206212a1117814e540fc$var$isFunction","$7b0b40924f81206212a1117814e540fc$var$escapeRegExp","string","replace","$7b0b40924f81206212a1117814e540fc$var$hasProperty","obj","propName","$7b0b40924f81206212a1117814e540fc$var$regExpTest","RegExp","test","$7b0b40924f81206212a1117814e540fc$var$nonSpaceRe","$7b0b40924f81206212a1117814e540fc$var$isWhitespace","re","$7b0b40924f81206212a1117814e540fc$var$testRegExp","$7b0b40924f81206212a1117814e540fc$var$entityMap","&","<",">","\"","'","/","`","=","$7b0b40924f81206212a1117814e540fc$var$whiteRe","$7b0b40924f81206212a1117814e540fc$var$spaceRe","$7b0b40924f81206212a1117814e540fc$var$equalsRe","$7b0b40924f81206212a1117814e540fc$var$curlyRe","$7b0b40924f81206212a1117814e540fc$var$tagRe","$7b0b40924f81206212a1117814e540fc$var$Scanner","this","tail","pos","$7b0b40924f81206212a1117814e540fc$var$Context","view","parentContext","cache",".","parent","$7b0b40924f81206212a1117814e540fc$var$Writer","templateCache","_cache","set","key","value","get","clear","eos","scan","match","index","substring","length","scanUntil","search","push","lookup","name","primitive","hasOwnProperty","intermediateValue","names","context","lookupHit","indexOf","split","clearCache","parse","template","tags","cacheKey","$7b0b40924f81206212a1117814e540fc$export$default","join","isCacheEnabled","tokens","undefined","openingTagRe","closingTagRe","closingCurlyRe","lineHasNonSpace","sections","spaces","hasTag","nonSpace","indentation","tagIndex","stripSpace","pop","compileTags","tagsToCompile","Error","start","type","chr","token","openSection","scanner","i","valueLength","charAt","nestedTokens","collector","numTokens","$7b0b40924f81206212a1117814e540fc$var$nestTokens","lastToken","squashedTokens","$7b0b40924f81206212a1117814e540fc$var$squashTokens","$7b0b40924f81206212a1117814e540fc$var$parseTemplate","render","partials","config","getConfigTags","renderTokens","originalTemplate","symbol","buffer","renderSection","renderInverted","renderPartial","unescapedValue","escapedValue","rawValue","self","j","slice","indentPartial","partial","filteredIndentation","partialByNl","indentedValue","escape","getConfigEscape","String","version","Scanner","Context","Writer","$7b0b40924f81206212a1117814e540fc$var$defaultWriter","TypeError","s","$091dd10a0ceba2fe9ee4e41b8a1e11f0$export$UI","innerHTML","source","textContent","selector","id","html","document","querySelector","rendered","target","data","add","$091dd10a0ceba2fe9ee4e41b8a1e11f0$var$closeModal","getElementById","_document$getElementB","remove","modal","content","click","closeModal","wrapper","createElement","dataset","body","appendChild","alert","message","warning","confirm","ifYes","ifNo","confirmYes","confirmNo","textInput","callback","processTextInput","e","text","$bd74da6b178ad2641259c408b53b24da$export$events","change","keyup","actions","addToPage","isValid","validationError","detail","htmlOutput","insertEvent","CustomEvent","dispatchEvent","importHtml","success","import","updateInterface","action","resetTable","fullReset","addColumn","columns","column","parseInt","addRow","rows","row","removeColumn","removeRow","syncHeading","location","updateTableHead","syncValue","updateTableBody","syncCaption","caption","getHtmlCode","output","mainTable","previewTable","syncDefaultValue","defaultNewValue","$c666400a1255e6ed6e0987946f997a33$export$Benchmark","constructor","performance","now","result","stop","pageContext","tableId","tableHeading","tableBody","templates","td","query","th","workshop","style","visibility","check","_workshop$querySelect","children","_workshop$querySelect2","_workshop$querySelect3","headRow","from","querySelectorAll","map","item","colMax","bodyRows","rowItem","rowIndex","newRow","filter","forEach","diff","parentElement","removeChild","insertIndex","splice","idex","headerHtml","bodyHtml","outHtml","_calcNumber","col","_uiCaption","element","_uiHeader","num","bind","number","first","thTemplate","_uiBody","columnCount","rowContent","tdTemplate","nextRow","rowTemplate","bench","len","section","_type","console","log","detailedResults","window","_mainTable","addEventListener","onload","_debug","events","ou"],"version":3,"file":"app.99eb8310.js.map"}